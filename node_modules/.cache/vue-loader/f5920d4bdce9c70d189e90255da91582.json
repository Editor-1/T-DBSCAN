{"remainingRequest":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\workspacevsCode\\web-ui-travel\\src\\views\\AMyWork\\tools\\poi\\PoiPanel.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\workspacevsCode\\web-ui-travel\\src\\views\\AMyWork\\tools\\poi\\PoiPanel.vue","mtime":1722303089682},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\vue-loader\\lib\\index.js","mtime":1720856215506}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["PoiPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"PoiPanel.vue","sourceRoot":"src/views/AMyWork/tools/poi","sourcesContent":["<template>\n  <div style=\"overflow: auto;width: 260px;background: white;\">\n    <!-- 列表页面 -->\n    <div v-show=\"page == 'list'\" class=\"poiPage\" style=\"margin-top: 10px;\">\n      <section style=\"margin: 0 20px;color:black;\">\n        <!-- 全选按钮和标绘按钮 -->\n        <div style=\"width: 100%;line-height:30px;color: #606266;\">\n          <div v-show=\"dataList.length>0\" style=\"float: left;\">\n            <el-button v-if=\"!drawing\" type=\"link\" @click=\"startDraw\" icon=\"el-icon-map-location\">\n              <i class=\"iconfont icon-jia-line\" /> 新增地点\n            </el-button>\n            <el-button v-if=\"drawing\" type=\"link\" @click=\"cancelDraw\">\n              取消\n            </el-button>\n          </div>\n        </div>\n        \n        <div style=\"width: 100%;line-height:30px;color: #606266;\">\n          <div v-show=\"dataList.length>0\" style=\"float: left;\">\n            <el-button type=\"link\" @click=\"clusterAnalysis\" icon=\"el-icon-wind-power\">聚合分析</el-button>\n          </div>\n        </div>\n        <!-- 搜索框 -->\n        <div style=\"clear: right;\">\n          <el-input\n            v-model=\"keyWord\"\n            placeholder=\"请输入你要查找的地名\"\n            style=\"width:220px;margin-top: 10px;\"\n            allow-clear\n            enter-button\n            @pressEnter=\"loadData\"\n            @search=\"loadData\"\n          />\n          <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"searchByName(keyWord)\">搜索</el-button>\n          <el-button type=\"primary\" icon=\"el-icon-position\" @click=\"navigation()\">\n            导航\n          </el-button>\n        </div>\n      <!-- 没有数据时候的展示 -->\n      </section>\n        <section style=\"margin: 20px;color:black;\">\n        <!-- 无数据时的占位符 -->\n        <el-empty v-show=\"dataList.length<1\" style=\"color: #606266;margin-top: 20px;padding-top: 120px;height:calc(100vh - 100px)\">\n          <span slot=\"description\"> 无数据 </span>\n          <el-button v-if=\"!drawing\" type=\"link\" @click=\"startDraw\">\n            <i class=\"iconfont icon-jia-line\" /> 标绘\n          </el-button>\n          <el-button v-if=\"drawing\" type=\"primary\" @click=\"cancelDraw\">\n            取消\n          </el-button>\n        </el-empty>\n        <!-- 数据列表 -->\n        <div v-show=\"dataList.length > 0\" item-layout=\"horizontal\" :data-source=\"dataList\" :style=\"{ height: 'calc(100vh - 240px)',overflow: 'auto' }\">\n          <!-- 分组 -->\n          <el-tree :data=\"nameList\" :props=\"defaultProps\" @node-click=\"handleNodeClick\"></el-tree>\n          <!--  -->\n          <div v-for=\"item in dataList\" :key=\"item.id\">\n            <div style=\"line-height: 36px;border-bottom: 1px solid #d3e1f5;\" @dblclick=\"edit(item)\"> \n              <div style=\"display: inline-block;\">{{ item.name }}</div>\n              <div style=\"float: right;\">\n                <el-button slot=\"actions\" type=\"text\" class=\"btn-link\" ghost @click=\"edit(item)\">编辑</el-button>\n                <el-button slot=\"actions\" type=\"text\" class=\"btn-link hover-red\" ghost @click=\"deleteClick(item)\">删除</el-button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n    <!-- 编辑页面 -->\n    <div v-show=\"page == 'edit'\">\n      <div style=\"padding: 20px;max-height: calc(100vh - 130px);overflow: auto;\">\n        <el-form ref=\"poiForm\" :model=\"currentPoint\" size=\"small\">\n          <el-form-item prop=\"name\" label=\"名称\">\n            <el-input v-model=\"currentPoint.name\" allow-clear />\n          </el-form-item>\n          <el-form-item prop=\"name\" label=\"时间\">\n            <el-input v-model=\"currentPoint.time\" allow-clear />\n          </el-form-item>\n          <el-form-item label=\"x\">\n            <el-input v-model=\"currentPoint.lng\" :min=\"-180\" :max=\"180\" @change=\"latLngChange\" />\n          </el-form-item>\n          <el-form-item label=\"y\">\n            <el-input v-model=\"currentPoint.lat\" :min=\"-90\" :max=\"90\" @change=\"latLngChange\" />\n          </el-form-item>\n          <el-form-item label=\"描述\" style=\"margin-bottom: 0;\">\n            <el-input v-model=\"currentPoint.desc\" type=\"textarea\" />\n          </el-form-item>\n          <el-form-item label=\"图片\" style=\"margin-top: 10px;\">\n            <image-upload :fileList=\"fileList\" type=\"poi\" @listChange=\"listChange\" />\n          </el-form-item>\n        </el-form>\n        <div style=\"width: 100%;\">\n          <el-button @click=\"backToList\">\n            返回\n          </el-button>\n          <div style=\"float: right;\">\n            <el-button style=\"margin-left: 10px;\" type=\"primary\" @click=\"save\">确定</el-button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- 导航页面  -->\n    <div v-show=\"page == 'navigation'\">\n      <div style=\"padding: 20px;max-height: calc(200vh - 130px);overflow: auto;\">\n        <el-form size=\"small\" >\n          <el-form-item prop=\"startPlace\" label=\"输入起点\">\n            <el-input v-model=\"startPlace.name\" allow-clear/>\n            <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"searchLngByName(startPlace)\">搜索</el-button>\n          </el-form-item>\n          <el-form-item prop=\"startPlaceLng\" label=\"起点经度\">\n            <el-input v-model=\"startPlace.lng\"/>\n          </el-form-item>\n          <el-form-item prop=\"startPlaceLat\" label=\"起点维度\">\n            <el-input v-model=\"startPlace.lat\"/>\n          </el-form-item>\n          <el-form-item prop=\"endPlace\" label=\"输入终点\">\n            <el-input v-model=\"endPlace.name\" allow-clear/>\n            <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"searchLngByName(endPlace)\">搜索</el-button>\n          </el-form-item>\n          <el-form-item prop=\"endPlaceLng\" label=\"终点经度\">\n            <el-input v-model=\"endPlace.lng\"/>\n          </el-form-item>\n          <el-form-item prop=\"endPlaceLat\" label=\"终点维度\">\n            <el-input v-model=\"endPlace.lat\"/>\n          </el-form-item>\n          <el-form-item  label=\"请选择导航路线类型\">\n            <el-select v-model=\"navstyle\" clearable placeholder=\"请选择\">\n              <el-option\n                v-for=\"item in navOptions\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-select>\n          </el-form-item>\n        </el-form>\n        <div style=\"width: 100%;\">\n          <el-button @click=\"backToList\">\n            返回\n          </el-button>\n          <div style=\"float: right;\">\n            <el-button style=\"margin-left: 10px;\" type=\"primary\" @click=\"searchRoute()\">确定</el-button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- 聚合分析页面 -->\n    <div v-show=\"page =='cluster'\">\n      <div style=\"padding: 20px;max-height: calc(200vh - 130px);overflow: auto;\">\n        <el-form size=\"small\">\n          <el-form-item label=\"聚合方法\">\n            <el-select v-model=\"clusterStyle\" placeholder=\"请选择\" clearable>\n              <el-option\n                v-for=\"item in clusterStyleOptions\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-select>\n          </el-form-item> \n          <el-form-item label=\"聚合数据\">\n            <el-select v-model=\"selectcludata\" placeholder=\"请选择\">\n              <el-option\n                v-for=\"item in clusterDataOptions\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.label\">\n              </el-option>\n            </el-select>\n          </el-form-item> \n          <el-form-item label=\"模式\">\n            <el-radio-group v-model=\"pattern\">\n              <el-radio :label=\"1\">简化</el-radio>\n              <el-radio :label=\"2\">初始</el-radio>\n              <el-radio :label=\"3\">聚合</el-radio>\n            </el-radio-group>\n          </el-form-item>\n          <el-form-item label=\"几何类型\">\n            <el-radio-group v-model=\"geometricType\">\n              <el-radio :label=\"1\">点</el-radio>\n              <el-radio :label=\"2\">点+线</el-radio>\n            </el-radio-group>\n          </el-form-item>\n        </el-form>\n        <div style=\"width: 100%;\">\n          <el-button @click=\"backToList\">\n            返回\n          </el-button>\n          <div style=\"float: right;\">\n            <el-button style=\"margin-left: 10px;\" type=\"primary\" @click=\"clusave\">确定</el-button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport L from 'leaflet'  // 引入Leaflet库\nimport 'leaflet-markers-canvas'\nimport 'leaflet.markercluster/dist/leaflet.markercluster';\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\nimport \"leaflet-canvas-marker\"\nimport Papa from 'papaparse'\nimport axios from 'axios'\nimport DrawPoi from './DrawPoi'\nimport DrawNewPoi from './DrawNewPoi'\nimport * as FileSave from './FileSave'\nimport { getUuid } from '../biz/common'\nimport IconsDialog from '../../../tool/build/IconsDialog.vue'\nimport 'leaflet/dist/leaflet.css'\nimport { douglasPeucker } from './DouglasPeuker'\nimport { kMeans } from '../algo/kmeans' \nimport { clarans } from '../algo/clarans' \nimport { dbscan } from '../algo/dbscan' \nimport { optics } from '../algo/optics' \nimport { tdbscan,convertDateStringToUnix } from '../algo/tdbscan' \nimport * as PathLayer from '../comm/PathLayer'\nconst pointerImg = require('@/assets/images/location64.png')\nconst cluPointImg = require('@/assets/images/point.png')\nconst arrowImg = require('@/assets/images/point.png')\n// 定义 drawPoi 变量\nlet drawNewPoi\nlet drawPoi\nlet previousLayers = []\nexport default {\n  components: { IconsDialog },\n  name: 'PoiPanel',\n  data() {\n    return {\n      selectcludata: '',\n      //灰鹤\n      greyCrane:[],\n      //小天鹅\n      cygne:[],\n      // 鸟类1\n      birdOne:[],\n      // 鸟类2\n      birdTwo:[],\n      // 数据模式\n      pattern:2,\n      // 几何类型\n      geometricType:1,\n      // 聚合算法\n      clusterStyle:'',\n      //聚合方式\n      clusterStyleOptions:[{\n        value:1,\n        label:'CLARANS'\n      },{\n        value:2,\n        label:'K-Means'\n      },{\n        value:3,\n        label:'DBSCAN'\n      },{\n        value:4,\n        label:'OPTICS'\n      },{\n        value:5,\n        label:'T-DBSCAN'\n      }],\n      // 聚合数据\n      clusterDataOptions:[{\n        value:0,\n        label:'灰鹤'\n      },{\n        value:1,\n        label:'小天鹅'\n      },{\n        value:2,\n        label:'鸟类1'\n      },{\n        value:3,\n        label:'鸟类2'\n      }],\n      showpoint: '0',\n      dataList: [], // 数据列表\n      page: 'list', // 当前页面（list 或 edit）\n      currentPoint: {\n        name: '',\n        time: ''\n      }, // 当前编辑的点信息\n      fileList: [], // 上传的文件列表\n      pointerImg: pointerImg, // 指针图片\n      drawing: false, // 是否正在绘制\n      navdrawing: false,\n      keyWord: '', // 搜索关键字\n      nameList:[],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      startPlace:{ //出发点\n        name:'',\n        lng: '',\n        lat: ''\n      },\n      endPlace:{ //终点\n        name:'',\n        lng: '',\n        lat: ''\n      },\n      //导航样式\n      navstyle: 0,\n      navOptions:[{\n        value:0,\n        label:'最快路线'\n      },{\n        value:1,\n        label:'最短路线'\n      },{\n        value:2,\n        label:'避开高速'\n      },{\n        value:3,\n        label:'步行'\n      }]\n    }\n  },\n  watch: {  \n    clusterStyle(newVal) {  \n      if (newVal) { // 确保有值被选中  \n        this.pattern = 3 // 设置为聚合  \n        // 如果需要，可以在这里添加逻辑来禁用或隐藏其他选项，但Element UI的el-radio不支持直接禁用  \n        // 一种方法是使用额外的数据属性来控制显示  \n      }else{\n        this.pattern = 2\n      }  \n    }  \n  },\n  mounted() {\n    // 初始化 drawPoi 和 PathLayer\n    this.$nextTick(() => {\n      drawNewPoi = new DrawNewPoi(this)\n      drawPoi = new DrawPoi(this)\n      PathLayer.init()\n    })\n    // 加载数据\n    this.loadData()\n    this.clusterDataOptions.forEach(item=>{\n      if(item.label=='灰鹤'){\n        this.greyCrane = this.loadCSV('灰鹤')\n      }else if(item.label=='小天鹅'){\n        this.cygnet = this.loadCSV('小天鹅')\n      }else if(item.label=='鸟类1'){\n        this.birdOne = this.loadCSV('鸟类1')\n      }else{\n        this.birdTwo = this.loadCSV('鸟类2')\n      }\n    })\n  },\n  beforeDestroy() {\n    // 清除绘制\n    drawNewPoi.clear()\n    drawNewPoi.drawCancel()\n  },\n  methods: {\n    clusave(){\n      // const clusterLayer = L.markerClusterGroup({\n      // showCoverageOnHover: false,\n      // // zoomToBoundsOnClick: false,\n      // // spiderfyOnMaxZoom: false,\n      // // removeOutsideVisibleBounds: false,\n      // // spiderLegPolylineOptions: {}\n      // // 自定义聚合样式\n      // // iconCreateFunction: function (cluster) {\n      // // return L.divIcon({html: '<b class=\"bg-#[f40]\">' + cluster.getChildCount() + '</b>'});\n      // // }\n      // });\n      // this.cludata.forEach(item =>{\n      //   if (item.lat != null && item.lng != null) {\n      //     const marker = L.marker([item.lng, item.lat], {  // 去掉多余的方括号\n      //       title: `点 ${item.time}`,\n      //       icon: L.icon({\n      //         iconUrl: cluPointImg,\n      //         iconSize: [12, 12],\n      //         iconAnchor: [0, 0]\n      //       })\n      //     });\n\n      //     marker.on('click', function (event) {\n      //       console.log('marker ====', event.latlng);\n      //     });\n\n      //     marker.on('clusterclick', function (a) {\n      //       console.log('cluster ' + a.layer.getAllChildMarkers().length);\n      //     });\n\n      //     clusterLayer.addLayer(marker);\n      //   } else {\n      //     console.warn(`Invalid lat/lng for item:`, item);\n      //   }\n      // })\n      // map.addLayer(clusterLayer);\n      // 清除先前的图层\n      previousLayers.forEach(layer => {\n          map.removeLayer(layer)\n      });\n      previousLayers = []\n      const markersCanvas = new L.MarkersCanvas()\n      markersCanvas.addTo(map)\n      previousLayers.push(markersCanvas)\n      var icon = L.icon({\n        iconUrl:cluPointImg,\n        iconSize:[12,12],\n        iconAnchor:[6,6]\n      })\n      const markers = []\n      if(this.selectcludata == '灰鹤'){\n        if(this.clusterStyle.length == 0){\n          if(this.pattern == '2'){\n             // 最原始点的展示\n            if(this.geometricType == '1'){\n              this.greyCrane.then(greyCraneArr=>{\n                var latlngs = []\n                greyCraneArr.forEach(item=>{\n                  if (item.lat != null && item.lng != null) {\n                    const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`时间:${item.time}<p>经度:${item.lat}<p>纬度:${item.lng}`).on({\n                      mouseover(e){\n                        this.openPopup()\n                      },\n                      mouseout(e){\n                        this.closePopup()\n                      }\n                    })\n                    markers.push(marker)\n                    latlngs.push([item.lng,item.lat])\n                  }\n                })\n                markersCanvas.addMarkers(markers)\n                previousLayers = previousLayers.concat(markers)\n                // L.polyline(latlngs,{color: 'red',weight: 3,offset: '0%'}).addTo(map);\n              })\n            }else if(this.geometricType == '2'){\n             // 点+线的展示\n             this.greyCrane.then(greyCraneArr=>{\n                var latlngs = []\n                greyCraneArr.forEach(item=>{\n                  if (item.lat != null && item.lng != null) {\n                    const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`时间:${item.time}<p>经度:${item.lat}<p>纬度:${item.lng}`).on({\n                      mouseover(e){\n                        this.openPopup()\n                      },\n                      mouseout(e){\n                        this.closePopup()\n                      }\n                    })\n                    markers.push(marker)\n                    latlngs.push([item.lng,item.lat])\n                  }\n                })\n                markersCanvas.addMarkers(markers)\n                previousLayers = previousLayers.concat(markers)\n                // L.polyline(latlngs,{color: 'red',weight: 3,offset: '0%'}).addTo(map);\n                var polyline = L.polyline(latlngs,{color: 'red',weight: 3}).addTo(map);\n                var decorator = L.polylineDecorator(polyline, {\n                    patterns: [\n                        // defines a pattern of 10px-wide dashes, repeated every 20px on the line\n                        {offset: 0, repeat: 35, symbol: L.Symbol.arrowHead({\n                         pixelSize: 5,  // 箭头大小\n                         headAngle : 75,  // 角度\n                         polygon: false,\n                         pathOptions: {stroke: true, weight: 2, color: 'blue'}\n                     })}\n                    ]\n                }).addTo(map);\n                previousLayers.push(decorator)\n                previousLayers.push(polyline)\n              })\n            }\n          }else{\n            // 简化点 使用道格拉斯滤波算法排除点\n            // 只有点\n            if(this.geometricType == '1'){\n              this.greyCrane.then(greyCraneArr => {\n                  var latlngs = [];\n                  greyCraneArr = douglasPeucker(greyCraneArr, 25000);\n                  greyCraneArr.forEach(item => {\n                      if (item[0] != null && item[1] != null) {\n                          const marker = L.marker([item[1], item[0]], { icon }).bindPopup(`时间:${item[2]}<p>经度:${item[1]}<p>纬度:${item[0]}`).on({\n                              mouseover(e) {\n                                  this.openPopup();\n                              },\n                              mouseout(e) {\n                                  this.closePopup();\n                              }\n                          });\n                          markers.push(marker);\n                          latlngs.push([item[1], item[0]]);\n                      }\n                  });\n\n                  markersCanvas.addMarkers(markers);\n                  previousLayers = previousLayers.concat(markers);\n              });\n            }else if(this.geometricType == '2'){this.greyCrane.then(greyCraneArr=>{\n                var latlngs = []\n                greyCraneArr = douglasPeucker(greyCraneArr, 25000)\n                greyCraneArr.forEach(item => {\n                    if (item[0] != null && item[1] != null) {\n                        const marker = L.marker([item[1], item[0]], { icon }).bindPopup(`时间:${item[2]}<p>经度:${item[1]}<p>纬度:${item[0]}`).on({\n                            mouseover(e) {\n                                this.openPopup();\n                            },\n                            mouseout(e) {\n                                this.closePopup();\n                            }\n                        });\n                        markers.push(marker);\n                        latlngs.push([item[1], item[0]]);\n                    }\n                });\n                markersCanvas.addMarkers(markers)\n                previousLayers = previousLayers.concat(markers)\n                // L.polyline(latlngs,{color: 'red',weight: 3,offset: '0%'}).addTo(map);\n                var polyline = L.polyline(latlngs,{color: 'red',weight: 3}).addTo(map);\n                var decorator = L.polylineDecorator(polyline, {\n                    patterns: [\n                        // defines a pattern of 10px-wide dashes, repeated every 20px on the line\n                        {offset: 0, repeat: 35, symbol: L.Symbol.arrowHead({\n                         pixelSize: 5,  // 箭头大小\n                         headAngle : 75,  // 角度\n                         polygon: false,\n                         pathOptions: {stroke: true, weight: 2, color: 'blue'}\n                     })}\n                    ]\n                }).addTo(map);\n                previousLayers.push(decorator)\n                previousLayers.push(polyline)\n              })\n            }\n          }\n        }else{\n          if(this.clusterStyle == 1){ //CLARANS\n            this.greyCrane.then(greyCraneArr=>{\n              const clusterCenters = clarans(greyCraneArr,20,5,100)\n              var latlngs = []\n              clusterCenters.forEach(item=>{\n                  if (item.lat != null && item.lng != null) {\n                    const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`经度:${item.lat}<p>纬度:${item.lng}`).on({\n                      mouseover(e){\n                        this.openPopup()\n                      },\n                      mouseout(e){\n                        this.closePopup()\n                      }\n                    })\n                    markers.push(marker)\n                    latlngs.push([item.lng,item.lat])\n                  }\n                })\n                markersCanvas.addMarkers(markers)\n                previousLayers = previousLayers.concat(markers)\n            })\n          }else if(this.clusterStyle == 2){ //K-Means\n            this.greyCrane.then(greyCraneArr=>{\n              const clusterCenters = kMeans(greyCraneArr,20)\n              var latlngs = []\n              clusterCenters.forEach(item=>{\n                  if (item.lat != null && item.lng != null) {\n                    const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`经度:${item.lat}<p>纬度:${item.lng}`).on({\n                      mouseover(e){\n                        this.openPopup()\n                      },\n                      mouseout(e){\n                        this.closePopup()\n                      }\n                    })\n                    markers.push(marker)\n                    latlngs.push([item.lng,item.lat])\n                  }\n                })\n                markersCanvas.addMarkers(markers)\n                previousLayers = previousLayers.concat(markers)\n            })\n          }else if(this.clusterStyle == 3){ //DBSCAN\n            this.greyCrane.then(greyCraneArr=>{\n              // var tempArr = []\n              // for(var i = 0;i<4000;i++)tempArr.push(greyCraneArr[i])\n              const clusterCenters = dbscan(greyCraneArr,25,70)\n              var latlngs = []\n              clusterCenters.forEach(item=>{\n                  if (item.lat != null && item.lng != null) {\n                    const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`经度:${item.lat}<p>纬度:${item.lng}`).on({\n                      mouseover(e){\n                        this.openPopup()\n                      },\n                      mouseout(e){\n                        this.closePopup()\n                      }\n                    })\n                    markers.push(marker)\n                    latlngs.push([item.lng,item.lat])\n                  }\n                })\n                markersCanvas.addMarkers(markers)\n                previousLayers = previousLayers.concat(markers)\n            })\n          }else if(this.clusterStyle == 4){ // OPTICS\n            this.greyCrane.then(greyCraneArr=>{\n              const clusterCenters = optics(greyCraneArr,25,70)\n              var latlngs = []\n              clusterCenters.forEach(item=>{\n                  if (item.lat != null && item.lng != null) {\n                    const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`经度:${item.lat}<p>纬度:${item.lng}`).on({\n                      mouseover(e){\n                        this.openPopup()\n                      },\n                      mouseout(e){\n                        this.closePopup()\n                      }\n                    })\n                    markers.push(marker)\n                    latlngs.push([item.lng,item.lat])\n                  }\n                })\n                markersCanvas.addMarkers(markers)\n                previousLayers = previousLayers.concat(markers)\n            })\n          }else if(this.clusterStyle == 5){ // T-DBSCAN\n            this.greyCrane.then(greyCraneArr => {\n                var temparr = [];\n                greyCraneArr.forEach(item => {\n                    temparr.push([item.lat, item.lng, convertDateStringToUnix(item.time)])\n                })\n                const clusterCenters = tdbscan(25, 3, 130, temparr);\n                console.log(clusterCenters)\n            })\n\n          }\n        }  \n      }\n     \n    },\n    \n    // 读取csv文件\n    async loadCSV(data) {  \n      const csvUrl = `../resource/${data}.csv`;  \n      try {  \n        const response = await fetch(csvUrl);  \n        if (!response.ok) throw new Error('Network response was not ok');  \n        const csv = await response.text();  \n        const results = Papa.parse(csv, { header: true }); \n        // this.cludata = results.data; // 将解析后的数据赋值给datalist  \n        return results.data\n      } catch (error) {  \n        console.error('Error loading CSV:', error);  \n        // 可以在这里处理错误，比如显示一个错误消息给用户  \n      }  \n    },\n    //根据地名查找经纬度\n    searchLngByName(options){\n      //湖南省环球信士公司\n      //请求： http://api.tianditu.gov.cn/geocoder?ds={\"keyWord\":\"北京市延庆区延庆镇莲花池村前街50夕阳红养老院\"}&tk=您的密钥\n      axios.get('http://api.tianditu.gov.cn/geocoder?ds={\"keyWord\":\"' + options.name + '\"}&tk=89dea3eab561f0dfb9867e531415e015').then(res => {\n        options.lng=res.data.location.lon\n        options.lat=res.data.location.lat\n      }).catch(err => {\n        console.error('Error fetching route:', err)\n      }) \n    },\n    //点击节点\n    handleNodeClick(data){\n      console.log('节点数据',data)\n      console.log('节点ID',data.$treeNodeId)\n    },\n    //导航\n    navigation(){\n      this.page='navigation' //跳转到导航界面\n      this.navdrawing = true\n      drawPoi.draw()\n    },\n    //绘制导航路线\n    searchRoute(){\n      this.showPath(this.startPlace,this.endPlace,this.navstyle)\n    },\n    //查询地名\n    searchByName(keyWord){\n      const list = []\n      FileSave.getList().then(res => {\n        const temp = res\n        if(temp){\n          temp.forEach(item =>{\n            if(item.name.includes(keyWord)){\n              list.push(item)\n            }\n          })\n        }\n      })\n      this.dataList = list\n    },\n    // 加载数据\n    loadData() {\n      FileSave.getList().then(res => {\n        console.log('res', res)\n        const list = res\n        if (res) {\n          // 处理图片\n          list.forEach(item => {\n            if (item.photos) {\n              const arr = item.photos.split('#')\n              if (arr.length > 0) {\n                item['photo0'] = arr[0]\n                item['photoArr'] = arr\n              }\n            }\n          })\n          this.dataList = list\n        } else {\n          this.dataList = []\n        }\n        const nameList = []\n        list.forEach(item =>{\n          if(item.name){\n              const [province,place] = item.name.split('-')\n              const provinces = nameList // 省份层级是树的根\n              const provinceNode = findOrCreateParent(provinces, province)\n              const places = provinceNode.children\n              findOrCreateParent(places, place) // 城市作为省份的子节点\n            }\n          }\n        )\n        this.nameList=nameList\n      })\n    },\n    // 聚合分析\n    clusterAnalysis(){\n      this.page = 'cluster'\n      drawNewPoi.clear()\n      drawPoi.clear()\n      PathLayer.clear()\n    },\n    // 开始绘制\n    startDraw() {\n      this.drawing = true\n      this.fileList = []\n      drawNewPoi.draw()\n    },\n    // 取消绘制\n    cancelDraw() {\n      drawNewPoi.drawCancel()\n      this.drawing = false\n    },\n    // 返回列表页面\n    backToList() {\n      this.page = 'list'\n      drawNewPoi.clear()\n      drawPoi.clear()\n      PathLayer.clear()\n      this.navdrawing = false\n      if(this.startPlace!=''){\n        this.startPlace.name=''\n        this.startPlace.lng=''\n        this.startPlace.lat=''\n        this.endPlace.name=''\n        this.endPlace.lng=''\n        this.endPlace.lat=''\n\n      }\n      this.$refs.poiForm.resetFields()\n    },\n    // 保存数据\n    save() {\n      this.$refs.poiForm.validate(valid => {\n        if (!valid) {\n          return\n        }\n        const currentPoint = this.currentPoint\n\n        const param = {\n          name: currentPoint.name,\n          time: currentPoint.time,\n          longitude: currentPoint.lng,\n          latitude: currentPoint.lat,\n          altitude: currentPoint.altitude || 0,\n          photos: '',\n          address: '',\n          desc: currentPoint.desc || ''\n        }\n        const photos = []\n        if (this.fileList.length > 0) {\n          this.fileList.forEach(f => {\n            photos.push(f.name)\n          })\n        }\n        if (photos.length > 0) {\n          param.photos = photos.join('#')\n        }\n\n        if (currentPoint.id) {\n          const item = this.dataList.find(d => d.id === currentPoint.id)\n          if (item) {\n            item.name = currentPoint.name || ''\n            item.time = currentPoint.time || ''\n            item.longitude = currentPoint.lng\n            item.latitude = currentPoint.lat\n            item.altitude = currentPoint.altitude || 0\n            item.photos = param.photos\n            item.address = param.address\n            item.desc = currentPoint.desc || ''\n            FileSave.create(this.dataList).then(res => {\n              this.$messageSuccess()\n              this.backToList()\n            })\n          }\n        } else {\n          param['id'] = getUuid()\n          this.dataList.push(param)\n          FileSave.create(this.dataList).then(res => {\n            this.$messageSuccess()\n            this.backToList()\n          })\n        }\n        this.loadData()\n      })\n    },\n    // 飞到指定点\n    flyTo(item) {\n      drawNewPoi.flyTo(item)\n    },\n    // 编辑指定点\n    edit(item) {\n      this.fileList = []\n      const photos = item.photos\n      if (photos) {\n        const arr = photos.split('#')\n        arr.forEach(url => {\n          this.fileList.push({\n            status: 'done',\n            url: url,\n            name: url,\n            uid: getUuid()\n          })\n        })\n      }\n      drawNewPoi.edit(item)\n    },\n    // 删除指定点\n    deleteClick(item) {\n      const idx = this.dataList.findIndex(d => d.id === item.id)\n      this.dataList.splice(idx, 1)\n      FileSave.create(this.dataList).then(res => {\n        this.$messageSuccess()\n        this.loadData()\n        drawNewPoi.clearById(item.id)\n      })\n    },\n    // 文件列表变化\n    listChange(list) {\n      this.fileList = list\n    },\n    // 经纬度变化\n    latLngChange(v) {\n      if (this.currentPoint.lat && this.currentPoint.lng) {\n        drawNewPoi.setLatLng(this.currentPoint.lat, this.currentPoint.lng)\n      }\n    },\n    // 显示路径\n    showPath(start,end,style) {\n      PathLayer.path(start,end,style)\n    }\n  }\n}\n// 辅助函数：在树中查找或添加父节点\nfunction findOrCreateParent(parents, parentName) {\n  let parent = parents.find(p => p.label === parentName);\n  if (!parent) {\n    parent = { label: parentName, children: [] };\n    parents.push(parent);\n  }\n  return parent;\n}\n\n</script>\n\n<style scoped>\n.poiImg {\n  width: 40px;\n  height: 40px;\n  border-radius: 5px;\n}\n</style>\n"]}]}