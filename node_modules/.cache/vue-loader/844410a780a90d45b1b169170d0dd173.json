{"remainingRequest":"E:\\GitProject\\T-DBSCAN\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\poi\\PoiPanel.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\poi\\PoiPanel.vue","mtime":1726751917634},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\vue-loader\\lib\\index.js","mtime":1720856215506}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["PoiPanel.vue"],"names":[],"mappingsfile":"PoiPanel.vue","sourceRoot":"src/views/AMyWork/tools/poi","sourcesContent":["<template>\n  <div style=\"overflow: auto;width: 260px;background: white;\">\n    <!-- 列表页面 -->\n    <div v-show=\"page == 'list'\" class=\"poiPage\" style=\"margin-top: 10px;\">\n      <section style=\"margin: 0 20px;color:black;\">\n        <!-- 全选按钮和标绘按钮 -->\n        <div style=\"width: 100%;line-height:30px;color: #606266;\">\n          <div v-show=\"dataList.length>0\" style=\"float: left;\">\n            <el-button v-if=\"!drawing\" type=\"link\" @click=\"startDraw\" icon=\"el-icon-map-location\">\n              <i class=\"iconfont icon-jia-line\" /> 新增地点\n            </el-button>\n            <el-button v-if=\"drawing\" type=\"link\" @click=\"cancelDraw\">\n              取消\n            </el-button>\n          </div>\n        </div>\n        \n        <div style=\"width: 100%;line-height:30px;color: #606266;\">\n          <div v-show=\"dataList.length>0\" style=\"float: left;\">\n            <el-button type=\"link\" @click=\"clusterAnalysis\" icon=\"el-icon-wind-power\">聚合分析</el-button>\n          </div>\n        </div>\n        <!-- 搜索框 -->\n        <div style=\"clear: right;\">\n          <el-input\n            v-model=\"keyWord\"\n            placeholder=\"请输入你要查找的地名\"\n            style=\"width:220px;margin-top: 10px;\"\n            allow-clear\n            enter-button\n            @pressEnter=\"loadData\"\n            @search=\"loadData\"\n          />\n          <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"searchByName(keyWord)\">搜索</el-button>\n          <el-button type=\"primary\" icon=\"el-icon-position\" @click=\"navigation()\">\n            导航\n          </el-button>\n        </div>\n      <!-- 没有数据时候的展示 -->\n      </section>\n        <section style=\"margin: 20px;color:black;\">\n        <!-- 无数据时的占位符 -->\n        <el-empty v-show=\"dataList.length<1\" style=\"color: #606266;margin-top: 20px;padding-top: 120px;height:calc(100vh - 100px)\">\n          <span slot=\"description\"> 无数据 </span>\n          <el-button v-if=\"!drawing\" type=\"link\" @click=\"startDraw\">\n            <i class=\"iconfont icon-jia-line\" /> 标绘\n          </el-button>\n          <el-button v-if=\"drawing\" type=\"primary\" @click=\"cancelDraw\">\n            取消\n          </el-button>\n        </el-empty>\n        <!-- 数据列表 -->\n        <div v-show=\"dataList.length > 0\" item-layout=\"horizontal\" :data-source=\"dataList\" :style=\"{ height: 'calc(100vh - 240px)',overflow: 'auto' }\">\n          <!-- 分组 -->\n          <el-tree :data=\"nameList\" :props=\"defaultProps\" @node-click=\"handleNodeClick\"></el-tree>\n          <!--  -->\n          <div v-for=\"item in dataList\" :key=\"item.id\">\n            <div style=\"line-height: 36px;border-bottom: 1px solid #d3e1f5;\" @dblclick=\"edit(item)\"> \n              <div style=\"display: inline-block;\">{{ item.name }}</div>\n              <div style=\"float: right;\">\n                <el-button slot=\"actions\" type=\"text\" class=\"btn-link\" ghost @click=\"edit(item)\">编辑</el-button>\n                <el-button slot=\"actions\" type=\"text\" class=\"btn-link hover-red\" ghost @click=\"deleteClick(item)\">删除</el-button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n    <!-- 编辑页面 -->\n    <div v-show=\"page == 'edit'\">\n      <div style=\"padding: 20px;max-height: calc(100vh - 130px);overflow: auto;\">\n        <el-form ref=\"poiForm\" :model=\"currentPoint\" size=\"small\">\n          <el-form-item prop=\"name\" label=\"名称\">\n            <el-input v-model=\"currentPoint.name\" allow-clear />\n          </el-form-item>\n          <el-form-item prop=\"name\" label=\"时间\">\n            <el-input v-model=\"currentPoint.time\" allow-clear />\n          </el-form-item>\n          <el-form-item label=\"x\">\n            <el-input v-model=\"currentPoint.lng\" :min=\"-180\" :max=\"180\" @change=\"latLngChange\" />\n          </el-form-item>\n          <el-form-item label=\"y\">\n            <el-input v-model=\"currentPoint.lat\" :min=\"-90\" :max=\"90\" @change=\"latLngChange\" />\n          </el-form-item>\n          <el-form-item label=\"描述\" style=\"margin-bottom: 0;\">\n            <el-input v-model=\"currentPoint.desc\" type=\"textarea\" />\n          </el-form-item>\n          <el-form-item label=\"图片\" style=\"margin-top: 10px;\">\n            <image-upload :fileList=\"fileList\" type=\"poi\" @listChange=\"listChange\" />\n          </el-form-item>\n        </el-form>\n        <div style=\"width: 100%;\">\n          <el-button @click=\"backToList\">\n            返回\n          </el-button>\n          <div style=\"float: right;\">\n            <el-button style=\"margin-left: 10px;\" type=\"primary\" @click=\"save\">确定</el-button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- 导航页面  -->\n    <div v-show=\"page == 'navigation'\">\n      <div style=\"padding: 20px;max-height: calc(200vh - 130px);overflow: auto;\">\n        <el-form size=\"small\" >\n          <el-form-item prop=\"startPlace\" label=\"输入起点\">\n            <el-input v-model=\"startPlace.name\" allow-clear/>\n            <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"searchLngByName(startPlace)\">搜索</el-button>\n          </el-form-item>\n          <el-form-item prop=\"startPlaceLng\" label=\"起点经度\">\n            <el-input v-model=\"startPlace.lng\"/>\n          </el-form-item>\n          <el-form-item prop=\"startPlaceLat\" label=\"起点维度\">\n            <el-input v-model=\"startPlace.lat\"/>\n          </el-form-item>\n          <el-form-item prop=\"endPlace\" label=\"输入终点\">\n            <el-input v-model=\"endPlace.name\" allow-clear/>\n            <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"searchLngByName(endPlace)\">搜索</el-button>\n          </el-form-item>\n          <el-form-item prop=\"endPlaceLng\" label=\"终点经度\">\n            <el-input v-model=\"endPlace.lng\"/>\n          </el-form-item>\n          <el-form-item prop=\"endPlaceLat\" label=\"终点维度\">\n            <el-input v-model=\"endPlace.lat\"/>\n          </el-form-item>\n          <el-form-item  label=\"请选择导航路线类型\">\n            <el-select v-model=\"navstyle\" clearable placeholder=\"请选择\">\n              <el-option\n                v-for=\"item in navOptions\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-select>\n          </el-form-item>\n        </el-form>\n        <div style=\"width: 100%;\">\n          <el-button @click=\"backToList\">\n            返回\n          </el-button>\n          <div style=\"float: right;\">\n            <el-button style=\"margin-left: 10px;\" type=\"primary\" @click=\"searchRoute()\">确定</el-button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- 聚合分析页面 -->\n    <div v-show=\"page =='cluster'\">\n      <div style=\"padding: 20px;max-height: calc(200vh - 130px);overflow: auto;\">\n        \n        <el-form size=\"small\">\n          <el-form-item label=\"聚合方法\">\n            <el-select v-model=\"clusterStyle\" placeholder=\"请选择\" clearable>\n              <el-option\n                v-for=\"item in clusterStyleOptions\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-select>\n          </el-form-item> \n          <el-form-item label=\"聚合数据\">\n            <el-select v-model=\"selectcludata\" placeholder=\"请选择\">\n              <el-option\n                v-for=\"item in clusterDataOptions\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.label\">\n              </el-option>\n            </el-select>\n          </el-form-item> \n          <el-form-item label=\"最大停留时长\" v-if=\"clusterStyle==5\">\n            <el-input v-model=\"maxstayTime\" placeholder=\"130.0\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"模式\">\n            <el-radio-group v-model=\"pattern\">\n              <el-radio :label=\"1\">简化</el-radio>\n              <el-radio :label=\"2\">初始</el-radio>\n              <el-radio :label=\"3\">聚合</el-radio>\n            </el-radio-group>\n          </el-form-item>\n          <el-form-item label=\"几何类型\">\n            <el-radio-group v-model=\"geometricType\">\n              <el-radio :label=\"1\">点</el-radio>\n              <el-radio :label=\"2\">点+线</el-radio>\n            </el-radio-group>\n          </el-form-item>\n        </el-form>\n        \n        <div style=\"width: 100%;\">\n          <el-button @click=\"backToList\">\n            返回\n          </el-button>\n          <div style=\"float: right;\">\n            <el-button style=\"margin-left: 10px;\" type=\"primary\" @click=\"clusave\">确定</el-button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// 在需要使用的 Vue 文件中只需导入一次\nimport * as Modules from './imports.js';\nconst { L, Papa, axios, DrawPoi, DrawNewPoi, FileSave, getUuid, IconsDialog, douglasPeucker, tdbscan, PathLayer } = Modules;\nconst pointerImg = require('@/assets/images/location64.png')\nconst cluPointImg = require('@/assets/images/point.png')\nconst cluCenterPointImg = require('@/assets/images/centerPoint.png')\n// 定义 drawPoi 变量\nlet drawNewPoi\nlet drawPoi\nlet previousLayers = []\nlet markersList = []\nlet markersCanvas\nexport default {\n  components: { IconsDialog },\n  name: 'PoiPanel',\n  data() {\n    return {\n      selectcludata: '',\n      //灰鹤\n      greyCrane:[],\n      //小天鹅\n      cygne:[],\n      // 鸟类1\n      birdOne:[],\n      // 鸟类2\n      birdTwo:[],\n      // 数据模式\n      pattern:2,\n      // 几何类型\n      geometricType:1,\n      // 聚合算法\n      clusterStyle:'',\n      //最大停留时长\n      maxstayTime:'',\n      //聚合方式\n      clusterStyleOptions:[{\n        value:1,\n        label:'CLARANS'\n      },{\n        value:2,\n        label:'K-Means'\n      },{\n        value:3,\n        label:'DBSCAN'\n      },{\n        value:4,\n        label:'OPTICS'\n      },{\n        value:5,\n        label:'T-DBSCAN'\n      }],\n      // 聚合数据\n      clusterDataOptions:[{\n        value:0,\n        label:'灰鹤'\n      },{\n        value:1,\n        label:'小天鹅'\n      },{\n        value:2,\n        label:'鸟类1'\n      },{\n        value:3,\n        label:'鸟类2'\n      }],\n      showpoint: '0',\n      dataList: [], // 数据列表\n      page: 'list', // 当前页面（list 或 edit）\n      currentPoint: {\n        name: '',\n        time: ''\n      }, // 当前编辑的点信息\n      fileList: [], // 上传的文件列表\n      pointerImg: pointerImg, // 指针图片\n      drawing: false, // 是否正在绘制\n      navdrawing: false,\n      keyWord: '', // 搜索关键字\n      nameList:[],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      startPlace:{ //出发点\n        name:'',\n        lng: '',\n        lat: ''\n      },\n      endPlace:{ //终点\n        name:'',\n        lng: '',\n        lat: ''\n      },\n      //导航样式\n      navstyle: 0,\n      navOptions:[{\n        value:0,\n        label:'最快路线'\n      },{\n        value:1,\n        label:'最短路线'\n      },{\n        value:2,\n        label:'避开高速'\n      },{\n        value:3,\n        label:'步行'\n      }]\n    }\n  },\n  watch: {  \n    clusterStyle(newVal) {  \n      if (newVal) { // 确保有值被选中  \n        this.pattern = 3 // 设置为聚合  \n      }else{\n        this.pattern = 2\n      }  \n    },\n    pattern(newVal){\n      if(newVal !== 3){\n        this.clusterStyle = ''\n      }\n    }  \n  },\n  mounted() {\n    // 初始化 drawPoi 和 PathLayer\n    this.$nextTick(() => {\n      drawNewPoi = new DrawNewPoi(this)\n      drawPoi = new DrawPoi(this)\n      PathLayer.init()\n    })\n    // 加载数据\n    this.loadData()\n    this.greyCrane = this.loadCSV('灰鹤8.1-11.30轨迹点')\n    this.cygne = this.loadCSV('小天鹅')\n    this.birdOne = this.loadCSV('鸟类1')\n    this.birdTwo = this.loadCSV('鸟类2')\n  },\n  beforeDestroy() {\n    // 清除绘制\n    drawNewPoi.clear()\n    drawNewPoi.drawCancel()\n  },\n  methods: {\n    clusave() {\n      if(markersCanvas){\n        markersCanvas.removeMarkers(markersList)\n        markersCanvas.clear()\n        markersList = [];\n      }\n      // 清理先前图层\n      previousLayers.forEach(layer => {\n        map.removeLayer(layer);\n      });\n      previousLayers = [];\n      // 添加新的MarkersCanvas\n      markersCanvas = new L.MarkersCanvas();\n      markersCanvas.addTo(map);\n      previousLayers.push(markersCanvas)\n      \n      // 定义通用图标\n      const icon = L.icon({\n        iconUrl: cluPointImg,\n        iconSize: [12, 12],\n        iconAnchor: [6, 6]\n      });\n      // 定义栖息地图标\n      const iconCenter = L.icon({\n        iconUrl: cluCenterPointImg,\n        iconSize: [15, 15],\n        iconAnchor: [6, 6]\n      });\n\n      // 根据鸟类选择数据\n      let temp_bird_data = this.getSelectedBirdData();\n\n      // 没有选择聚类方式时\n      if (this.clusterStyle.length === 0) {\n        this.displayWithoutClustering(temp_bird_data, markersCanvas, icon,this.pattern);\n      } else {\n        this.displayWithClustering(temp_bird_data, markersCanvas, iconCenter);\n      }\n\n      // 弹窗提示已经聚类结束\n      this.$message({\n        message:'聚类完成',\n        type:'success'\n      })\n\n    },\n\n    // 根据选择的鸟类返回对应数据\n    getSelectedBirdData() {\n      switch(this.selectcludata) {\n        case '灰鹤':\n          return this.greyCrane;\n        case '小天鹅':\n          return this.cygne;\n        case '鸟类1':\n          return this.birdOne;\n        case '鸟类2':\n          return this.birdTwo;\n        default:\n          return [];\n      }\n    },\n\n    // 不聚类时的展示逻辑\n    displayWithoutClustering(temp_bird_data, markersCanvas, icon,pattern) {\n      if(pattern == '1'){ //简化版本，调用了滤波算法\n        temp_bird_data.then(birdArr => {\n          let latlngs = [];\n          birdArr = douglasPeucker(birdArr,25000)\n          birdArr.forEach(item => {\n            if (isValidLatLng(item)) {\n              const marker = this.createMarker(item, icon);\n              markersCanvas.addMarker(marker);\n              markersList.push(marker);\n              latlngs.push([item.lat, item.lng]);\n            }\n          });\n          this.handleGeometricType(latlngs, markersCanvas);\n        });\n      }else{\n        //最原始的点\n        temp_bird_data.then(birdArr => {\n          let latlngs = [];\n          birdArr.forEach(item => {\n            if (isValidLatLng(item)) {\n              const marker = this.createMarker(item, icon);\n              markersList.push(marker);\n              markersCanvas.addMarker(marker);\n              latlngs.push([item.lat, item.lng]);\n            }\n          });\n          this.handleGeometricType(latlngs, markersCanvas);\n        });\n      }\n    },\n\n    // 聚类后的展示逻辑\n    displayWithClustering(temp_bird_data, markersCanvas, icon) {\n      temp_bird_data.then(birdArr => {\n        let clusterCenters = [];\n        let latlngs = [];\n        // 建立四叉树索引方便后续的查询操作\n        const rootRegion = new Region(-90, 90, -180, 180);\n        const root = new QuadTreeNode(1, rootRegion);\n        var points = birdArr\n        points.forEach((p, index) => {\n            p.index = index;\n            insertEle(root, p);\n        });\n        switch(this.clusterStyle) {\n          case 1:\n            clusterCenters = clarans(points, 20, 5, 100);\n            break;\n          case 2:\n            clusterCenters = kMeans(points, 20);\n            break;\n          case 3:\n            clusterCenters = dbscan(points, 25, 70);\n            break;\n          case 4:\n            clusterCenters =  optics(points,25,70);\n            break;\n          case 5:\n            if(this.maxstayTime == ''){\n              this.maxstayTime = 130\n            }\n            const gpsPoints = []\n            birdArr.forEach(item=>{\n              const temp = new ElePoint(parseFloat(item.lat), parseFloat(item.lng), convertDateStringToUnix(item.time), gpsPoints.length);\n              gpsPoints.push(temp);\n            })\n            \n            const {clusters,CorePoints} = tdbscan(gpsPoints,25000,60 * 60 * 24 * 3,60 * 60 * 24 * this.maxstayTime)\n            for(const p of CorePoints){\n                var num = 0\n                for(const v of clusters){\n                  if(clusters[p.index]===v){\n                    num++\n                  }\n                }\n                // if(num>=30){\n                const item = birdArr[p.index]\n                clusterCenters.push(item)\n                // }\n            }\n            break;\n        }\n        // 计算停歇时间 做分级渲染\n        // clusterCenters = douglasPeucker(clusterCenters,5000)\n        clusterCenters.forEach(item =>{\n          const point  = new ElePoint(item.lat,item.lng,convertDateStringToUnix(item.time),item.index)\n          const EpsResults = []\n          queryEle(root,point,EpsResults,25000)\n          const centerPoint = getCenterPoint(EpsResults)\n          const times = EpsResults.map(point => convertDateStringToUnix(point.time))\n          const startTime = new Date(Math.min(...times))\n          const endTime = new Date(Math.max(...times))\n          const startTimeStr = convertUnixToDateString(startTime)\n          const endTimeStr = convertUnixToDateString(endTime)\n          const maxstayTime = (Math.max(...times) - Math.min(...times))/(60*60*24)\n          if(isValidLatLng(centerPoint)){\n            const marker = this.createCenterMarker({centerPoint,maxstayTime,startTimeStr,endTimeStr}, icon);\n            markersCanvas.addMarker(marker);\n            previousLayers.push(marker)\n            markersList.push(marker)\n            latlngs.push([centerPoint.lat, centerPoint.lng]);\n          }\n        })\n        this.handleGeometricType(latlngs, markersCanvas);\n      });\n    },\n    // 创建栖息地点位，时间越长，icon的size将会随着调整\n    createCenterMarker(item,icon){\n       return L.marker([item.centerPoint.lat, item.centerPoint.lng], { icon })\n        .bindPopup(`停留时间:${item.maxstayTime.toFixed(2)}天<p>\n          开始时间:${item.startTimeStr}<p>\n          结束时间:${item.endTimeStr}<p>\n          经度:${parseFloat(item.centerPoint.lng).toFixed(5)}<p>纬度:${parseFloat(item.centerPoint.lat).toFixed(5)}`)\n        .on({\n          mouseover(e) { this.openPopup(); },\n          mouseout(e) { this.closePopup(); }\n        });\n    },\n    // 创建普通点标记\n    createMarker(item, icon) {\n      return L.marker([item.lat, item.lng], { icon })\n        .bindPopup(`时间:${item.time}<p>经度:${parseFloat(item.lng).toFixed(5)}<p>纬度:${parseFloat(item.lat).toFixed(5)}`)\n        .on({\n          mouseover(e) { this.openPopup(); },\n          mouseout(e) { this.closePopup(); }\n        });\n    },\n\n    // 根据几何类型绘制\n    handleGeometricType(latlngs, markersCanvas) {\n      if (this.geometricType != '1') {\n        const polyline = L.polyline(latlngs, { color: 'red', weight: 3 }).addTo(map);\n        const decorator = L.polylineDecorator(polyline, {\n          patterns: [\n            { offset: 0, repeat: 35, symbol: L.Symbol.arrowHead({\n              pixelSize: 5,\n              headAngle: 75,\n              polygon: false,\n              pathOptions: { stroke: true, weight: 2, color: 'blue' }\n            })}\n          ]\n        }).addTo(map);\n        previousLayers.push(decorator);\n        previousLayers.push(polyline);\n      }\n    },\n    // 读取csv文件\n    async loadCSV(data) {    \n      const csvUrl = `../resource/${data}.csv`;    \n      try {    \n        const response = await fetch(csvUrl);    \n        if (!response.ok) throw new Error('Network response was not ok');    \n        const csv = await response.text();    \n        const results = Papa.parse(csv, {  \n          header: true,  \n          transform: function(value, field) {  \n            if (field === 'lng' || field === 'lat') {  \n              const num = parseFloat(value);  \n              return isNaN(num) ? value : num;  \n            }  \n            return value;  \n          }  \n        });   \n        \n        // 按照第一列时间字符串排序\n        const sortedData = results.data.sort((a, b) => {\n          const timeA = convertDateStringToUnix(a[Object.keys(a)[0]]); // 第一列的时间值\n          const timeB = convertDateStringToUnix(b[Object.keys(b)[0]]);\n          return timeA - timeB; // 升序排列\n        });\n        \n        return sortedData;    \n      } catch (error) {    \n        console.error('Error loading CSV:', error);    \n        throw error; \n      }    \n    },\n    //根据地名查找经纬度\n    searchLngByName(options){\n      //湖南省环球信士公司\n      //请求： http://api.tianditu.gov.cn/geocoder?ds={\"keyWord\":\"北京市延庆区延庆镇莲花池村前街50夕阳红养老院\"}&tk=您的密钥\n      axios.get('http://api.tianditu.gov.cn/geocoder?ds={\"keyWord\":\"' + options.name + '\"}&tk=89dea3eab561f0dfb9867e531415e015').then(res => {\n        options.lng=res.data.location.lon\n        options.lat=res.data.location.lat\n      }).catch(err => {\n        console.error('Error fetching route:', err)\n      }) \n    },\n    //点击节点\n    handleNodeClick(data){\n      console.log('节点数据',data)\n      console.log('节点ID',data.$treeNodeId)\n    },\n    //导航\n    navigation(){\n      this.page='navigation' //跳转到导航界面\n      this.navdrawing = true\n      drawPoi.draw()\n    },\n    //绘制导航路线\n    searchRoute(){\n      this.showPath(this.startPlace,this.endPlace,this.navstyle)\n    },\n    //查询地名\n    searchByName(keyWord){\n      const list = []\n      FileSave.getList().then(res => {\n        const temp = res\n        if(temp){\n          temp.forEach(item =>{\n            if(item.name.includes(keyWord)){\n              list.push(item)\n            }\n          })\n        }\n      })\n      this.dataList = list\n    },\n    // 加载数据\n    loadData() {\n      FileSave.getList().then(res => {\n        console.log('res', res)\n        const list = res\n        if (res) {\n          // 处理图片\n          list.forEach(item => {\n            if (item.photos) {\n              const arr = item.photos.split('#')\n              if (arr.length > 0) {\n                item['photo0'] = arr[0]\n                item['photoArr'] = arr\n              }\n            }\n          })\n          this.dataList = list\n        } else {\n          this.dataList = []\n        }\n        const nameList = []\n        list.forEach(item =>{\n          if(item.name){\n              const [province,place] = item.name.split('-')\n              const provinces = nameList // 省份层级是树的根\n              const provinceNode = findOrCreateParent(provinces, province)\n              const places = provinceNode.children\n              findOrCreateParent(places, place) // 城市作为省份的子节点\n            }\n          }\n        )\n        this.nameList=nameList\n      })\n    },\n    // 聚合分析\n    clusterAnalysis(){\n      this.page = 'cluster'\n      drawNewPoi.clear()\n      drawPoi.clear()\n      PathLayer.clear()\n    },\n    // 开始绘制\n    startDraw() {\n      this.drawing = true\n      this.fileList = []\n      drawNewPoi.draw()\n    },\n    // 取消绘制\n    cancelDraw() {\n      drawNewPoi.drawCancel()\n      this.drawing = false\n    },\n    // 返回列表页面\n    backToList() {\n      this.page = 'list'\n      drawNewPoi.clear()\n      drawPoi.clear()\n      PathLayer.clear()\n      this.navdrawing = false\n      if(this.startPlace!=''){\n        this.startPlace.name=''\n        this.startPlace.lng=''\n        this.startPlace.lat=''\n        this.endPlace.name=''\n        this.endPlace.lng=''\n        this.endPlace.lat=''\n\n      }\n      this.$refs.poiForm.resetFields()\n    },\n    // 保存数据\n    save() {\n      this.$refs.poiForm.validate(valid => {\n        if (!valid) {\n          return\n        }\n        const currentPoint = this.currentPoint\n\n        const param = {\n          name: currentPoint.name,\n          time: currentPoint.time,\n          longitude: currentPoint.lng,\n          latitude: currentPoint.lat,\n          altitude: currentPoint.altitude || 0,\n          photos: '',\n          address: '',\n          desc: currentPoint.desc || ''\n        }\n        const photos = []\n        if (this.fileList.length > 0) {\n          this.fileList.forEach(f => {\n            photos.push(f.name)\n          })\n        }\n        if (photos.length > 0) {\n          param.photos = photos.join('#')\n        }\n\n        if (currentPoint.id) {\n          const item = this.dataList.find(d => d.id === currentPoint.id)\n          if (item) {\n            item.name = currentPoint.name || ''\n            item.time = currentPoint.time || ''\n            item.longitude = currentPoint.lng\n            item.latitude = currentPoint.lat\n            item.altitude = currentPoint.altitude || 0\n            item.photos = param.photos\n            item.address = param.address\n            item.desc = currentPoint.desc || ''\n            FileSave.create(this.dataList).then(res => {\n              this.$messageSuccess()\n              this.backToList()\n            })\n          }\n        } else {\n          param['id'] = getUuid()\n          this.dataList.push(param)\n          FileSave.create(this.dataList).then(res => {\n            this.$messageSuccess()\n            this.backToList()\n          })\n        }\n        this.loadData()\n      })\n    },\n    // 飞到指定点\n    flyTo(item) {\n      drawNewPoi.flyTo(item)\n    },\n    // 编辑指定点\n    edit(item) {\n      this.fileList = []\n      const photos = item.photos\n      if (photos) {\n        const arr = photos.split('#')\n        arr.forEach(url => {\n          this.fileList.push({\n            status: 'done',\n            url: url,\n            name: url,\n            uid: getUuid()\n          })\n        })\n      }\n      drawNewPoi.edit(item)\n    },\n    // 删除指定点\n    deleteClick(item) {\n      const idx = this.dataList.findIndex(d => d.id === item.id)\n      this.dataList.splice(idx, 1)\n      FileSave.create(this.dataList).then(res => {\n        this.$messageSuccess()\n        this.loadData()\n        drawNewPoi.clearById(item.id)\n      })\n    },\n    // 文件列表变化\n    listChange(list) {\n      this.fileList = list\n    },\n    // 经纬度变化\n    latLngChange(v) {\n      if (this.currentPoint.lat && this.currentPoint.lng) {\n        drawNewPoi.setLatLng(this.currentPoint.lat, this.currentPoint.lng)\n      }\n    },\n    // 显示路径\n    showPath(start,end,style) {\n      PathLayer.path(start,end,style)\n    }\n  }\n}\n// 辅助函数：在树中查找或添加父节点\nfunction findOrCreateParent(parents, parentName) {\n  let parent = parents.find(p => p.label === parentName);\n  if (!parent) {\n    parent = { label: parentName, children: [] };\n    parents.push(parent);\n  }\n  return parent;\n}\n\n</script>\n\n<style scoped>\n.poiImg {\n  width: 40px;\n  height: 40px;\n  border-radius: 5px;\n}\n</style>\n"]}]}