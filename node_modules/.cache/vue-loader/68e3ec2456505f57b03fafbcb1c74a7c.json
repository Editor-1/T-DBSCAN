{"remainingRequest":"E:\\GitProject\\T-DBSCAN\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\GitProject\\T-DBSCAN\\src\\components\\DictTag\\index.vue?vue&type=style&index=0&id=7e7e1b87&scoped=true&lang=css","dependencies":[{"path":"E:\\GitProject\\T-DBSCAN\\src\\components\\DictTag\\index.vue","mtime":1677117676000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1720856215764},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\vue-loader\\lib\\index.js","mtime":1720856215506}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLXRhZyArIC5lbC10YWcgewogIG1hcmdpbi1sZWZ0OiAxMHB4Owp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/DictTag","sourcesContent":["<template>\n  <div>\n    <template v-for=\"(item, index) in options\">\n      <template v-if=\"values.includes(item.value)\">\n        <span\n          v-if=\"item.raw.listClass == 'default' || item.raw.listClass == ''\"\n          :key=\"item.value\"\n          :index=\"index\"\n          :class=\"item.raw.cssClass\"\n          >{{ item.label }}</span\n        >\n        <el-tag\n          v-else\n          :disable-transitions=\"true\"\n          :key=\"item.value\"\n          :index=\"index\"\n          :type=\"item.raw.listClass == 'primary' ? '' : item.raw.listClass\"\n          :class=\"item.raw.cssClass\"\n        >\n          {{ item.label }}\n        </el-tag>\n      </template>\n    </template>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"DictTag\",\n  props: {\n    options: {\n      type: Array,\n      default: null,\n    },\n    value: [Number, String, Array],\n  },\n  computed: {\n    values() {\n      if (this.value !== null && typeof this.value !== 'undefined') {\n        return Array.isArray(this.value) ? this.value : [String(this.value)];\n      } else {\n        return [];\n      }\n    },\n  },\n};\n</script>\n<style scoped>\n.el-tag + .el-tag {\n  margin-left: 10px;\n}\n</style>"]}]}