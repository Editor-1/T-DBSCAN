{"remainingRequest":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\babel-loader\\lib\\index.js!E:\\workspacevsCode\\web-ui-travel\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\workspacevsCode\\web-ui-travel\\src\\views\\AMyWork\\tools\\algo\\clarans.js","dependencies":[{"path":"E:\\workspacevsCode\\web-ui-travel\\src\\views\\AMyWork\\tools\\algo\\clarans.js","mtime":1722251057265},{"path":"E:\\workspacevsCode\\web-ui-travel\\babel.config.js","mtime":1677117676000},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1720856214296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNsYXJhbnMgPSBjbGFyYW5zOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucHVzaC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnNldC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIik7CmZ1bmN0aW9uIGNsYXJhbnMoZGF0YSwgaywgbnVtTG9jYWwsIG1heE5laWdoYm9yKSB7CiAgLy8g6K6h566X5Lik54K56Ze05qyn5rCP6Led56a755qE6L6F5Yqp5Ye95pWwCiAgZnVuY3Rpb24gY2FsY3VsYXRlRGlzdGFuY2UocG9pbnQxLCBwb2ludDIpIHsKICAgIHZhciBsYXQxID0gcGFyc2VGbG9hdChwb2ludDEubGF0KTsKICAgIHZhciBsbmcxID0gcGFyc2VGbG9hdChwb2ludDEubG5nKTsKICAgIHZhciBsYXQyID0gcGFyc2VGbG9hdChwb2ludDIubGF0KTsKICAgIHZhciBsbmcyID0gcGFyc2VGbG9hdChwb2ludDIubG5nKTsKICAgIHZhciByYWRMYXQxID0gbGF0MSAqIE1hdGguUEkgLyAxODAuMDsKICAgIHZhciByYWRMYXQyID0gbGF0MiAqIE1hdGguUEkgLyAxODAuMDsKICAgIHZhciBhID0gcmFkTGF0MSAtIHJhZExhdDI7CiAgICB2YXIgYiA9IGxuZzEgKiBNYXRoLlBJIC8gMTgwLjAgLSBsbmcyICogTWF0aC5QSSAvIDE4MC4wOwogICAgdmFyIHMgPSAyICogTWF0aC5hc2luKE1hdGguc3FydChNYXRoLnBvdyhNYXRoLnNpbihhIC8gMiksIDIpICsgTWF0aC5jb3MocmFkTGF0MSkgKiBNYXRoLmNvcyhyYWRMYXQyKSAqIE1hdGgucG93KE1hdGguc2luKGIgLyAyKSwgMikpKTsKICAgIHJldHVybiBzICogNjM3MDk5Ni44MTsKICB9CgogIC8vIOiuoeeul+iBmuexu+e7k+aenOeahOaAu+aIkOacrAogIGZ1bmN0aW9uIGNhbGN1bGF0ZVRvdGFsQ29zdChkYXRhLCBtZWRvaWRzKSB7CiAgICB2YXIgdG90YWxDb3N0ID0gMDsKICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAocG9pbnQpIHsKICAgICAgdmFyIG1pbkRpc3QgPSBJbmZpbml0eTsKICAgICAgbWVkb2lkcy5mb3JFYWNoKGZ1bmN0aW9uIChtZWRvaWQpIHsKICAgICAgICB2YXIgZGlzdCA9IGNhbGN1bGF0ZURpc3RhbmNlKHBvaW50LCBtZWRvaWQpOwogICAgICAgIGlmIChkaXN0IDwgbWluRGlzdCkgewogICAgICAgICAgbWluRGlzdCA9IGRpc3Q7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgdG90YWxDb3N0ICs9IG1pbkRpc3Q7CiAgICB9KTsKICAgIHJldHVybiB0b3RhbENvc3Q7CiAgfQoKICAvLyDliJ3lp4vljJZtZWRvaWRzCiAgZnVuY3Rpb24gaW5pdGlhbGl6ZU1lZG9pZHMoZGF0YSwgaykgewogICAgdmFyIG1lZG9pZHMgPSBbXTsKICAgIHZhciB1c2VkSW5kaWNlcyA9IG5ldyBTZXQoKTsKICAgIHdoaWxlIChtZWRvaWRzLmxlbmd0aCA8IGspIHsKICAgICAgdmFyIGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZGF0YS5sZW5ndGgpOwogICAgICBpZiAoIXVzZWRJbmRpY2VzLmhhcyhpbmRleCkpIHsKICAgICAgICBtZWRvaWRzLnB1c2goZGF0YVtpbmRleF0pOwogICAgICAgIHVzZWRJbmRpY2VzLmFkZChpbmRleCk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBtZWRvaWRzOwogIH0KCiAgLy8gQ0xBUkFOU+eul+azleS4u+WHveaVsAogIHZhciBiZXN0TWVkb2lkcyA9IGluaXRpYWxpemVNZWRvaWRzKGRhdGEsIGspOwogIHZhciBiZXN0Q29zdCA9IGNhbGN1bGF0ZVRvdGFsQ29zdChkYXRhLCBiZXN0TWVkb2lkcyk7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1Mb2NhbDsgaSsrKSB7CiAgICB2YXIgY3VycmVudE1lZG9pZHMgPSBpbml0aWFsaXplTWVkb2lkcyhkYXRhLCBrKTsKICAgIHZhciBjdXJyZW50Q29zdCA9IGNhbGN1bGF0ZVRvdGFsQ29zdChkYXRhLCBjdXJyZW50TWVkb2lkcyk7CiAgICB2YXIgbmVpZ2hib3JDb3VudGVyID0gMDsKICAgIHdoaWxlIChuZWlnaGJvckNvdW50ZXIgPCBtYXhOZWlnaGJvcikgewogICAgICAvLyDpmo/mnLrpgInmi6nkuIDkuKptZWRvaWTlubblsJ3or5Xmm7/mjaIKICAgICAgdmFyIHJhbmRvbU1lZG9pZEluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogayk7CiAgICAgIHZhciByYW5kb21Ob25NZWRvaWRJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGRhdGEubGVuZ3RoKTsKICAgICAgdmFyIG5ld01lZG9pZHMgPSBjdXJyZW50TWVkb2lkcy5zbGljZSgpOwogICAgICBuZXdNZWRvaWRzW3JhbmRvbU1lZG9pZEluZGV4XSA9IGRhdGFbcmFuZG9tTm9uTWVkb2lkSW5kZXhdOwogICAgICB2YXIgbmV3Q29zdCA9IGNhbGN1bGF0ZVRvdGFsQ29zdChkYXRhLCBuZXdNZWRvaWRzKTsKICAgICAgaWYgKG5ld0Nvc3QgPCBjdXJyZW50Q29zdCkgewogICAgICAgIGN1cnJlbnRNZWRvaWRzID0gbmV3TWVkb2lkczsKICAgICAgICBjdXJyZW50Q29zdCA9IG5ld0Nvc3Q7CiAgICAgICAgbmVpZ2hib3JDb3VudGVyID0gMDsgLy8g6YeN572ubmVpZ2hib3LorqHmlbDlmagKICAgICAgfSBlbHNlIHsKICAgICAgICBuZWlnaGJvckNvdW50ZXIrKzsKICAgICAgfQogICAgfQogICAgaWYgKGN1cnJlbnRDb3N0IDwgYmVzdENvc3QpIHsKICAgICAgYmVzdE1lZG9pZHMgPSBjdXJyZW50TWVkb2lkczsKICAgICAgYmVzdENvc3QgPSBjdXJyZW50Q29zdDsKICAgIH0KICB9CiAgcmV0dXJuIGJlc3RNZWRvaWRzOwp9"},{"version":3,"names":["clarans","data","k","numLocal","maxNeighbor","calculateDistance","point1","point2","lat1","parseFloat","lat","lng1","lng","lat2","lng2","radLat1","Math","PI","radLat2","a","b","s","asin","sqrt","pow","sin","cos","calculateTotalCost","medoids","totalCost","forEach","point","minDist","Infinity","medoid","dist","initializeMedoids","usedIndices","Set","length","index","floor","random","has","push","add","bestMedoids","bestCost","i","currentMedoids","currentCost","neighborCounter","randomMedoidIndex","randomNonMedoidIndex","newMedoids","slice","newCost"],"sources":["E:/workspacevsCode/web-ui-travel/src/views/AMyWork/tools/algo/clarans.js"],"sourcesContent":["export function clarans(data, k, numLocal, maxNeighbor) {\r\n    // 计算两点间欧氏距离的辅助函数\r\n    function calculateDistance(point1, point2) {\r\n        const lat1 = parseFloat(point1.lat);\r\n        const lng1 = parseFloat(point1.lng);\r\n        const lat2 = parseFloat(point2.lat);\r\n        const lng2 = parseFloat(point2.lng);\r\n\r\n        const radLat1 = lat1 * Math.PI / 180.0;\r\n        const radLat2 = lat2 * Math.PI / 180.0;\r\n        const a = radLat1 - radLat2;\r\n        const b = (lng1 * Math.PI / 180.0) - (lng2 * Math.PI / 180.0);\r\n        const s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) +\r\n            Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));\r\n        return s * 6370996.81;\r\n    }\r\n\r\n    // 计算聚类结果的总成本\r\n    function calculateTotalCost(data, medoids) {\r\n        let totalCost = 0;\r\n        data.forEach(point => {\r\n            let minDist = Infinity;\r\n            medoids.forEach(medoid => {\r\n                const dist = calculateDistance(point, medoid);\r\n                if (dist < minDist) {\r\n                    minDist = dist;\r\n                }\r\n            });\r\n            totalCost += minDist;\r\n        });\r\n        return totalCost;\r\n    }\r\n\r\n    // 初始化medoids\r\n    function initializeMedoids(data, k) {\r\n        const medoids = [];\r\n        const usedIndices = new Set();\r\n        while (medoids.length < k) {\r\n            const index = Math.floor(Math.random() * data.length);\r\n            if (!usedIndices.has(index)) {\r\n                medoids.push(data[index]);\r\n                usedIndices.add(index);\r\n            }\r\n        }\r\n        return medoids;\r\n    }\r\n\r\n    // CLARANS算法主函数\r\n    let bestMedoids = initializeMedoids(data, k);\r\n    let bestCost = calculateTotalCost(data, bestMedoids);\r\n\r\n    for (let i = 0; i < numLocal; i++) {\r\n        let currentMedoids = initializeMedoids(data, k);\r\n        let currentCost = calculateTotalCost(data, currentMedoids);\r\n        let neighborCounter = 0;\r\n\r\n        while (neighborCounter < maxNeighbor) {\r\n            // 随机选择一个medoid并尝试替换\r\n            const randomMedoidIndex = Math.floor(Math.random() * k);\r\n            const randomNonMedoidIndex = Math.floor(Math.random() * data.length);\r\n\r\n            const newMedoids = currentMedoids.slice();\r\n            newMedoids[randomMedoidIndex] = data[randomNonMedoidIndex];\r\n\r\n            const newCost = calculateTotalCost(data, newMedoids);\r\n\r\n            if (newCost < currentCost) {\r\n                currentMedoids = newMedoids;\r\n                currentCost = newCost;\r\n                neighborCounter = 0; // 重置neighbor计数器\r\n            } else {\r\n                neighborCounter++;\r\n            }\r\n        }\r\n\r\n        if (currentCost < bestCost) {\r\n            bestMedoids = currentMedoids;\r\n            bestCost = currentCost;\r\n        }\r\n    }\r\n\r\n    return bestMedoids;\r\n}\r\n"],"mappings":"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","ignoreList":[]}]}