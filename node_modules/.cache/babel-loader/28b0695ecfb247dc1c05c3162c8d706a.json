{"remainingRequest":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js!E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\algo\\tdbscan.js","dependencies":[{"path":"E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\algo\\tdbscan.js","mtime":1729074875492},{"path":"E:\\GitProject\\T-DBSCAN\\babel.config.js","mtime":1677117676000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1720856214296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["_pubMethods","require","calTimeDis","p1","p2","Math","abs","timestamp","convexHull","points","sort","a","b","lng","lat","n","length","map","p","index","hull","i","cross","pop","push","t","o","tdbscan","eps","minTime","maxTime","console","log","rootRegion","Region","root","QuadTreeNode","forEach","insertEle","visited","Array","fill","clusters","CorePoints","clusterId","unvisited","_toConsumableArray2","default","keys","_loop","pIndex","shift","maxStayTime","point","ElePoint","EpsResults","queryEle","pointTemp","EpsResultsTemp","elementA","disTime","max","conPoints","neighborhoodVertex","peakmp","mmp","_iterator","_createForOfIteratorHelper2","_step","s","done","v","value","err","e","f","peaks","_iterator2","_step2","_iterator3","_step3","Object","key","q","maxStayTempTime","Results","TempResults","j","tempPoints","_iterator4","_step4","tempPeaks","_iterator5","_step5","_iterator6","_step6"],"sources":["E:/GitProject/T-DBSCAN/src/views/AMyWork/tools/algo/tdbscan.js"],"sourcesContent":["import {Region}  from './pubMethods'\r\nimport {ElePoint}  from './pubMethods'\r\nimport {QuadTreeNode}  from './pubMethods'\r\nimport {insertEle,queryEle} from './pubMethods'\r\n\r\n\r\nfunction calTimeDis(p1, p2) {\r\n    return Math.abs(p1.timestamp - p2.timestamp)/(60*60*24); // 时间差，单位为秒\r\n}\r\n\r\nfunction convexHull(points) {\r\n    points.sort((a, b) => a.lng - b.lng || a.lat - b.lat);\r\n    const n = points.length;\r\n    if (n < 3) return points.map(p => p.index);\r\n\r\n    const hull = [];\r\n    for (let i = 0; i < n; i++) {\r\n        while (hull.length >= 2 && cross(hull[hull.length - 2], hull[hull.length - 1], points[i]) <= 0) {\r\n            hull.pop();\r\n        }\r\n        hull.push(points[i]);\r\n    }\r\n    for (let i = n - 2, t = hull.length + 1; i >= 0; i--) {\r\n        while (hull.length >= t && cross(hull[hull.length - 2], hull[hull.length - 1], points[i]) <= 0) {\r\n            hull.pop();\r\n        }\r\n        hull.push(points[i]);\r\n    }\r\n    hull.pop();\r\n    return hull.map(p => p.index);\r\n}\r\n\r\nfunction cross(o, a, b) {\r\n    return (a.lng - o.lng) * (b.lat - o.lat) - (a.lat - o.lat) * (b.lng - o.lng);\r\n}\r\n\r\nexport function tdbscan(points, eps, minTime, maxTime) {\r\n    console.log(points)\r\n    // 一些初始化工作、建立四叉树索引，访问数组全部置为false、聚类簇设置为-1\r\n    const rootRegion = new Region(-90, 90, -180, 180)\r\n    const root = new QuadTreeNode(1, rootRegion)\r\n    var points = points\r\n    points.forEach((p, index) => {\r\n        p.index = index\r\n        insertEle(root, p)\r\n    });\r\n    let visited = Array(points.length).fill(false)\r\n    let clusters = Array(points.length).fill(-1)\r\n    let CorePoints = []\r\n\r\n    let clusterId = -1\r\n    let unvisited = [...Array(points.length).keys()]\r\n    \r\n    \r\n    while (unvisited.length > 0) {\r\n        const pIndex = unvisited.shift()\r\n        const p = points[pIndex]\r\n        visited[pIndex] = true\r\n\r\n        let maxStayTime = 0;\r\n        const point = new ElePoint(p.lat, p.lng, p.timestamp, p.index)\r\n        let EpsResults = []\r\n        queryEle(root, point, EpsResults, eps)\r\n        EpsResults.sort((a,b)=> a.timestamp - b.timestamp)\r\n        let index = 0\r\n        let pointTemp = EpsResults[index]\r\n\t\tlet EpsResultsTemp = []\r\n        for(let i = index + 1;i < EpsResults.length; i++){\r\n            const elementA = EpsResults[i]\r\n            if(!visited[elementA.index]){\r\n                const disTime = calTimeDis(elementA,pointTemp)\r\n                if(disTime <= maxTime){\r\n                    EpsResultsTemp.push(elementA)\r\n                    maxStayTime = Math.max(maxStayTime,calTimeDis(elementA,point))\r\n                    pointTemp = elementA\r\n                }else{\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        // 将需要扩展点代入\r\n        EpsResults = EpsResultsTemp\r\n       \r\n        // 满足时间阈值\r\n        if (maxStayTime >= minTime) {\r\n            // 创建一个新簇 将点point添加到\r\n            clusterId++;\r\n            clusters[pIndex] = clusterId;\r\n            let conPoints = [];\r\n            let neighborhoodVertex = [];\r\n            let peakmp = {};\r\n            let mmp = {};\r\n            for (const v of EpsResults) {\r\n                if (!visited[v.index]) conPoints.push(v);\r\n            }\r\n            // 只向凸包顶点拓展\r\n            const peaks = convexHull(conPoints);\r\n            for (const v of peaks) peakmp[v] = true;\r\n\r\n            for (const v of EpsResults) {\r\n                if (!peakmp[v.index]) {\r\n                    clusters[v.index] = clusterId;\r\n                    visited[v.index] = true;\r\n                } else {\r\n                    neighborhoodVertex.push(v);\r\n                    mmp[v.index] = 1;\r\n                }\r\n            }\r\n            conPoints.length = 0;\r\n            Object.keys(peakmp).forEach(key => delete peakmp[key]);  \r\n            // 继续拓展领域点 标记为核心点簇\r\n            for (let i = 0; i < neighborhoodVertex.length; i++) {\r\n                const q = neighborhoodVertex[i];\r\n                if (!visited[q.index]) {\r\n                    if (clusters[q.index] === -1) clusters[q.index] = clusterId;\r\n                    visited[q.index] = true;\r\n            \r\n                    let maxStayTempTime = 0\r\n                    let Results = []\r\n                    let TempResults = []\r\n                    queryEle(root,q,Results,eps)\r\n                    Results.sort((a,b) => a.timestamp - b.timestamp)\r\n                    index = 0\r\n                    pointTemp = Results[index]\r\n                    for(let j = index + 1;j < Results.length;j++){\r\n                        const elementA = Results[j]\r\n                        if(!visited[elementA.index]){\r\n                            const disTime = calTimeDis(elementA,pointTemp)\r\n                            if(disTime <= maxTime){\r\n                                TempResults.push(elementA)\r\n                                // 计算最大停歇时长\r\n                                maxStayTempTime = Math.max(maxStayTempTime,calTimeDis(q,elementA))\r\n                                pointTemp = elementA\r\n                            }else{\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                    Results = TempResults\r\n                    // 符合\r\n                    if (maxStayTempTime >= minTime) {\r\n                        const tempPoints = [];\r\n                        for (const v of Results) {\r\n                            if (mmp[v.index]!==1 || !visited[v.index]) {\r\n                                tempPoints.push(v);\r\n                            }\r\n                        }\r\n            \r\n                        const tempPeaks = convexHull(tempPoints);\r\n                        for (const v of tempPeaks) peakmp[v] = true;\r\n            \r\n                        for (const v of Results) {\r\n                            if (mmp[v.index]===1 || !peakmp[v.index]) {\r\n                                visited[v.index] = true;\r\n                                if (clusters[v.index] === -1) clusters[v.index] = clusterId;\r\n                            } else { \r\n                                // 添加判断条件，确保不重复添加元素到neighborhoodVertex\r\n                                neighborhoodVertex.push(v);\r\n                                mmp[v.index] = 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    Object.keys(peakmp).forEach(key => delete peakmp[key]); \r\n                }\r\n            }\r\n\r\n            unvisited.length = 0;\r\n            for (let i = 0; i < points.length; i++) {\r\n                if (!visited[i]) unvisited.push(i);\r\n            }\r\n            CorePoints.push({ index: p.index});\r\n        } else {\r\n            clusters[p.index] = -1;\r\n        }\r\n    }\r\n    console.log(CorePoints)\r\n    return { clusters, CorePoints };\r\n}\r\n  \r\n  \r\n"],"mappings":"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","ignoreList":[]}]}