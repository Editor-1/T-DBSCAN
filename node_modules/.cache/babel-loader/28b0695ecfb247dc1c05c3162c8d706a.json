{"remainingRequest":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js!E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\algo\\tdbscan.js","dependencies":[{"path":"E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\algo\\tdbscan.js","mtime":1726276483667},{"path":"E:\\GitProject\\T-DBSCAN\\babel.config.js","mtime":1677117676000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1720856214296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["_pubMethods","require","EPS","MIN_TIME","MAX_TIME","calTimeDis","p1","p2","Math","abs","timestamp","convexHull","points","sort","a","b","lng","lat","n","length","map","p","index","hull","i","cross","pop","push","t","o","tdbscan","eps","minTime","maxTime","rootRegion","Region","root","QuadTreeNode","forEach","insertEle","visited","Array","fill","clusters","CorePoints","clusterId","unvisited","_toConsumableArray2","default","keys","_loop","pIndex","shift","maxStayTime","point","ElePoint","EpsResults","queryEle","visTemp","_i2","_EpsResults","v","disTime","max","_iterator","_createForOfIteratorHelper2","_step","s","done","value","err","e","f","conPoints","neighborhoodVertex","peakmp","mmp","_iterator2","_step2","peaks","_iterator3","_step3","_iterator4","_step4","Object","key","cmpTime","q","cmpTempTime","TempResults","_i3","_TempResults","tempDisTime","tempCmpTime","tempPoints","_iterator5","_step5","tempPeaks","_iterator6","_step6","_iterator7","_step7","time"],"sources":["E:/GitProject/T-DBSCAN/src/views/AMyWork/tools/algo/tdbscan.js"],"sourcesContent":["const EPS = 25000;\r\nconst MIN_TIME = 60 * 60 * 24 * 3; // 3天，秒为单位\r\nconst MAX_TIME = 60 * 60 * 24 * 130; // 130天，秒为单位\r\nimport {Region}  from './pubMethods'\r\nimport {ElePoint}  from './pubMethods'\r\nimport {QuadTreeNode}  from './pubMethods'\r\nimport {insertEle,queryEle} from './pubMethods'\r\n\r\n\r\nfunction calTimeDis(p1, p2) {\r\n    return Math.abs(p1.timestamp - p2.timestamp); // 时间差，单位为秒\r\n}\r\n\r\nfunction convexHull(points) {\r\n    points.sort((a, b) => a.lng - b.lng || a.lat - b.lat);\r\n    const n = points.length;\r\n    if (n < 3) return points.map(p => p.index);\r\n\r\n    const hull = [];\r\n    for (let i = 0; i < n; i++) {\r\n        while (hull.length >= 2 && cross(hull[hull.length - 2], hull[hull.length - 1], points[i]) <= 0) {\r\n            hull.pop();\r\n        }\r\n        hull.push(points[i]);\r\n    }\r\n    for (let i = n - 2, t = hull.length + 1; i >= 0; i--) {\r\n        while (hull.length >= t && cross(hull[hull.length - 2], hull[hull.length - 1], points[i]) <= 0) {\r\n            hull.pop();\r\n        }\r\n        hull.push(points[i]);\r\n    }\r\n    hull.pop();\r\n    return hull.map(p => p.index);\r\n}\r\n\r\nfunction cross(o, a, b) {\r\n    return (a.lng - o.lng) * (b.lat - o.lat) - (a.lat - o.lat) * (b.lng - o.lng);\r\n}\r\n\r\nexport function tdbscan(points, eps, minTime, maxTime) {\r\n    const rootRegion = new Region(-90, 90, -180, 180);\r\n    const root = new QuadTreeNode(1, rootRegion);\r\n    var points = points\r\n    points.forEach((p, index) => {\r\n        p.index = index;\r\n        insertEle(root, p);\r\n    });\r\n\r\n    const visited = Array(points.length).fill(false);\r\n    const clusters = Array(points.length).fill(-1);\r\n    const CorePoints = [];\r\n\r\n    let clusterId = -1;\r\n    const unvisited = [...Array(points.length).keys()];\r\n    \r\n\r\n    while (unvisited.length > 0) {\r\n        const pIndex = unvisited.shift();\r\n        const p = points[pIndex];\r\n        visited[pIndex] = true;\r\n\r\n        let maxStayTime = 0;\r\n        const point = new ElePoint(p.lat, p.lng, p.timestamp, p.index);\r\n        const EpsResults = [];\r\n        queryEle(root, point, EpsResults, eps);\r\n\r\n        const visTemp = [];\r\n        for (const v of EpsResults) {\r\n            if (!visited[v.index]) {\r\n                const disTime = calTimeDis(v, p);\r\n                if (disTime < maxTime) {\r\n                    maxStayTime = Math.max(maxStayTime, disTime);\r\n                } else {\r\n                    visTemp.push(v.index);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (maxStayTime >= minTime) {\r\n            for (const v of visTemp) visited[v] = true;\r\n\r\n            clusterId++;\r\n            clusters[pIndex] = clusterId;\r\n            const conPoints = [];\r\n            const neighborhoodVertex = [];\r\n            const peakmp = {};\r\n            const mmp = {};\r\n            for (const v of EpsResults) {\r\n                if (!visited[v.index]) conPoints.push(v);\r\n            }\r\n            \r\n            const peaks = convexHull(conPoints);\r\n            for (const v of peaks) peakmp[v] = true;\r\n\r\n            for (const v of EpsResults) {\r\n                if (!peakmp[v.index]) {\r\n                    clusters[v.index] = clusterId;\r\n                    visited[v.index] = true;\r\n                } else {\r\n                    neighborhoodVertex.push(v);\r\n                    mmp[v.index] = 1;\r\n                }\r\n            }\r\n            conPoints.length = 0;\r\n            Object.keys(peakmp).forEach(key => delete peakmp[key]);  \r\n            let cmpTime = maxStayTime;\r\n\r\n            \r\n            for (let i = 0; i < neighborhoodVertex.length; i++) {\r\n                const q = neighborhoodVertex[i];\r\n                if (!visited[q.index]) {\r\n                    if (clusters[q.index] === -1) clusters[q.index] = clusterId;\r\n                    visited[q.index] = true;\r\n            \r\n                    let cmpTempTime = cmpTime;\r\n                    let maxStayTime = 0;\r\n                    const TempResults = [];\r\n                    queryEle(root, q, TempResults, eps);\r\n            \r\n                    for (const v of TempResults) {\r\n                        if (!visited[v.index]) {\r\n                            const tempDisTime = calTimeDis(q, v);\r\n                            const tempCmpTime = calTimeDis(p, v);\r\n                            if (tempCmpTime < maxTime && tempDisTime < maxTime) {\r\n                                maxStayTime = Math.max(tempDisTime, maxStayTime);\r\n                                cmpTempTime = Math.max(cmpTempTime, tempCmpTime);\r\n                            }\r\n                        }\r\n                    }\r\n            \r\n                    if (maxStayTime >= minTime) {\r\n                        cmpTime = Math.max(cmpTempTime, cmpTime);\r\n                        const tempPoints = [];\r\n                        for (const v of TempResults) {\r\n                            if (mmp[v.index]!==1 || !visited[v.index]) {\r\n                                tempPoints.push(v);\r\n                            }\r\n                        }\r\n            \r\n                        const tempPeaks = convexHull(tempPoints);\r\n                        for (const v of tempPeaks) peakmp[v] = true;\r\n            \r\n                        for (const v of TempResults) {\r\n                            if (mmp[v.index]===1 || !peakmp[v.index]) {\r\n                                visited[v.index] = true;\r\n                                if (clusters[v.index] === -1) clusters[v.index] = clusterId;\r\n                            } else { \r\n                                // 添加判断条件，确保不重复添加元素到neighborhoodVertex\r\n                                neighborhoodVertex.push(v);\r\n                                mmp[v.index] = 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    Object.keys(peakmp).forEach(key => delete peakmp[key]); \r\n                }\r\n            }\r\n\r\n            unvisited.length = 0;\r\n            for (let i = 0; i < points.length; i++) {\r\n                if (!visited[i]) unvisited.push(i);\r\n            }\r\n            CorePoints.push({ index: p.index, time: cmpTime });\r\n        } else {\r\n            clusters[p.index] = -1;\r\n        }\r\n    }\r\n\r\n    return { clusters, CorePoints };\r\n}\r\n  \r\n"],"mappings":";;;;;;;;;;;;;;;;;AAGA,IAAAA,WAAA,GAAAC,OAAA;AAHA,IAAMC,GAAG,GAAG,KAAK;AACjB,IAAMC,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AACnC,IAAMC,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;;AAOrC,SAASC,UAAUA,CAACC,EAAE,EAAEC,EAAE,EAAE;EACxB,OAAOC,IAAI,CAACC,GAAG,CAACH,EAAE,CAACI,SAAS,GAAGH,EAAE,CAACG,SAAS,CAAC,CAAC,CAAC;AAClD;AAEA,SAASC,UAAUA,CAACC,MAAM,EAAE;EACxBA,MAAM,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKD,CAAC,CAACE,GAAG,GAAGD,CAAC,CAACC,GAAG,IAAIF,CAAC,CAACG,GAAG,GAAGF,CAAC,CAACE,GAAG;EAAA,EAAC;EACrD,IAAMC,CAAC,GAAGN,MAAM,CAACO,MAAM;EACvB,IAAID,CAAC,GAAG,CAAC,EAAE,OAAON,MAAM,CAACQ,GAAG,CAAC,UAAAC,CAAC;IAAA,OAAIA,CAAC,CAACC,KAAK;EAAA,EAAC;EAE1C,IAAMC,IAAI,GAAG,EAAE;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,CAAC,EAAEM,CAAC,EAAE,EAAE;IACxB,OAAOD,IAAI,CAACJ,MAAM,IAAI,CAAC,IAAIM,KAAK,CAACF,IAAI,CAACA,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC,EAAEI,IAAI,CAACA,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC,EAAEP,MAAM,CAACY,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;MAC5FD,IAAI,CAACG,GAAG,CAAC,CAAC;IACd;IACAH,IAAI,CAACI,IAAI,CAACf,MAAM,CAACY,CAAC,CAAC,CAAC;EACxB;EACA,KAAK,IAAIA,EAAC,GAAGN,CAAC,GAAG,CAAC,EAAEU,CAAC,GAAGL,IAAI,CAACJ,MAAM,GAAG,CAAC,EAAEK,EAAC,IAAI,CAAC,EAAEA,EAAC,EAAE,EAAE;IAClD,OAAOD,IAAI,CAACJ,MAAM,IAAIS,CAAC,IAAIH,KAAK,CAACF,IAAI,CAACA,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC,EAAEI,IAAI,CAACA,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC,EAAEP,MAAM,CAACY,EAAC,CAAC,CAAC,IAAI,CAAC,EAAE;MAC5FD,IAAI,CAACG,GAAG,CAAC,CAAC;IACd;IACAH,IAAI,CAACI,IAAI,CAACf,MAAM,CAACY,EAAC,CAAC,CAAC;EACxB;EACAD,IAAI,CAACG,GAAG,CAAC,CAAC;EACV,OAAOH,IAAI,CAACH,GAAG,CAAC,UAAAC,CAAC;IAAA,OAAIA,CAAC,CAACC,KAAK;EAAA,EAAC;AACjC;AAEA,SAASG,KAAKA,CAACI,CAAC,EAAEf,CAAC,EAAEC,CAAC,EAAE;EACpB,OAAO,CAACD,CAAC,CAACE,GAAG,GAAGa,CAAC,CAACb,GAAG,KAAKD,CAAC,CAACE,GAAG,GAAGY,CAAC,CAACZ,GAAG,CAAC,GAAG,CAACH,CAAC,CAACG,GAAG,GAAGY,CAAC,CAACZ,GAAG,KAAKF,CAAC,CAACC,GAAG,GAAGa,CAAC,CAACb,GAAG,CAAC;AAChF;AAEO,SAASc,OAAOA,CAAClB,MAAM,EAAEmB,GAAG,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACnD,IAAMC,UAAU,GAAG,IAAIC,kBAAM,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;EACjD,IAAMC,IAAI,GAAG,IAAIC,wBAAY,CAAC,CAAC,EAAEH,UAAU,CAAC;EAC5C,IAAItB,MAAM,GAAGA,MAAM;EACnBA,MAAM,CAAC0B,OAAO,CAAC,UAACjB,CAAC,EAAEC,KAAK,EAAK;IACzBD,CAAC,CAACC,KAAK,GAAGA,KAAK;IACf,IAAAiB,qBAAS,EAACH,IAAI,EAAEf,CAAC,CAAC;EACtB,CAAC,CAAC;EAEF,IAAMmB,OAAO,GAAGC,KAAK,CAAC7B,MAAM,CAACO,MAAM,CAAC,CAACuB,IAAI,CAAC,KAAK,CAAC;EAChD,IAAMC,QAAQ,GAAGF,KAAK,CAAC7B,MAAM,CAACO,MAAM,CAAC,CAACuB,IAAI,CAAC,CAAC,CAAC,CAAC;EAC9C,IAAME,UAAU,GAAG,EAAE;EAErB,IAAIC,SAAS,GAAG,CAAC,CAAC;EAClB,IAAMC,SAAS,OAAAC,mBAAA,CAAAC,OAAA,EAAOP,KAAK,CAAC7B,MAAM,CAACO,MAAM,CAAC,CAAC8B,IAAI,CAAC,CAAC,CAAC;EAAC,IAAAC,KAAA,YAAAA,MAAA,EAGtB;IACzB,IAAMC,MAAM,GAAGL,SAAS,CAACM,KAAK,CAAC,CAAC;IAChC,IAAM/B,CAAC,GAAGT,MAAM,CAACuC,MAAM,CAAC;IACxBX,OAAO,CAACW,MAAM,CAAC,GAAG,IAAI;IAEtB,IAAIE,WAAW,GAAG,CAAC;IACnB,IAAMC,KAAK,GAAG,IAAIC,oBAAQ,CAAClC,CAAC,CAACJ,GAAG,EAAEI,CAAC,CAACL,GAAG,EAAEK,CAAC,CAACX,SAAS,EAAEW,CAAC,CAACC,KAAK,CAAC;IAC9D,IAAMkC,UAAU,GAAG,EAAE;IACrB,IAAAC,oBAAQ,EAACrB,IAAI,EAAEkB,KAAK,EAAEE,UAAU,EAAEzB,GAAG,CAAC;IAEtC,IAAM2B,OAAO,GAAG,EAAE;IAClB,SAAAC,GAAA,MAAAC,WAAA,GAAgBJ,UAAU,EAAAG,GAAA,GAAAC,WAAA,CAAAzC,MAAA,EAAAwC,GAAA,IAAE;MAAvB,IAAME,CAAC,GAAAD,WAAA,CAAAD,GAAA;MACR,IAAI,CAACnB,OAAO,CAACqB,CAAC,CAACvC,KAAK,CAAC,EAAE;QACnB,IAAMwC,OAAO,GAAGzD,UAAU,CAACwD,CAAC,EAAExC,CAAC,CAAC;QAChC,IAAIyC,OAAO,GAAG7B,OAAO,EAAE;UACnBoB,WAAW,GAAG7C,IAAI,CAACuD,GAAG,CAACV,WAAW,EAAES,OAAO,CAAC;QAChD,CAAC,MAAM;UACHJ,OAAO,CAAC/B,IAAI,CAACkC,CAAC,CAACvC,KAAK,CAAC;QACzB;MACJ;IACJ;IAEA,IAAI+B,WAAW,IAAIrB,OAAO,EAAE;MAAA,IAAAgC,SAAA,OAAAC,2BAAA,CAAAjB,OAAA,EACRU,OAAO;QAAAQ,KAAA;MAAA;QAAvB,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAA9C,CAAA,IAAAkD,IAAA,GAAyB;UAAA,IAAdP,GAAC,GAAAK,KAAA,CAAAG,KAAA;UAAa7B,OAAO,CAACqB,GAAC,CAAC,GAAG,IAAI;QAAA;MAAC,SAAAS,GAAA;QAAAN,SAAA,CAAAO,CAAA,CAAAD,GAAA;MAAA;QAAAN,SAAA,CAAAQ,CAAA;MAAA;MAE3C3B,SAAS,EAAE;MACXF,QAAQ,CAACQ,MAAM,CAAC,GAAGN,SAAS;MAC5B,IAAM4B,SAAS,GAAG,EAAE;MACpB,IAAMC,kBAAkB,GAAG,EAAE;MAC7B,IAAMC,MAAM,GAAG,CAAC,CAAC;MACjB,IAAMC,GAAG,GAAG,CAAC,CAAC;MAAC,IAAAC,UAAA,OAAAZ,2BAAA,CAAAjB,OAAA,EACCQ,UAAU;QAAAsB,MAAA;MAAA;QAA1B,KAAAD,UAAA,CAAAV,CAAA,MAAAW,MAAA,GAAAD,UAAA,CAAA3D,CAAA,IAAAkD,IAAA,GAA4B;UAAA,IAAjBP,GAAC,GAAAiB,MAAA,CAAAT,KAAA;UACR,IAAI,CAAC7B,OAAO,CAACqB,GAAC,CAACvC,KAAK,CAAC,EAAEmD,SAAS,CAAC9C,IAAI,CAACkC,GAAC,CAAC;QAC5C;MAAC,SAAAS,GAAA;QAAAO,UAAA,CAAAN,CAAA,CAAAD,GAAA;MAAA;QAAAO,UAAA,CAAAL,CAAA;MAAA;MAED,IAAMO,KAAK,GAAGpE,UAAU,CAAC8D,SAAS,CAAC;MAAC,IAAAO,UAAA,OAAAf,2BAAA,CAAAjB,OAAA,EACpB+B,KAAK;QAAAE,MAAA;MAAA;QAArB,KAAAD,UAAA,CAAAb,CAAA,MAAAc,MAAA,GAAAD,UAAA,CAAA9D,CAAA,IAAAkD,IAAA,GAAuB;UAAA,IAAZP,GAAC,GAAAoB,MAAA,CAAAZ,KAAA;UAAWM,MAAM,CAACd,GAAC,CAAC,GAAG,IAAI;QAAA;MAAC,SAAAS,GAAA;QAAAU,UAAA,CAAAT,CAAA,CAAAD,GAAA;MAAA;QAAAU,UAAA,CAAAR,CAAA;MAAA;MAAA,IAAAU,UAAA,OAAAjB,2BAAA,CAAAjB,OAAA,EAExBQ,UAAU;QAAA2B,MAAA;MAAA;QAA1B,KAAAD,UAAA,CAAAf,CAAA,MAAAgB,MAAA,GAAAD,UAAA,CAAAhE,CAAA,IAAAkD,IAAA,GAA4B;UAAA,IAAjBP,GAAC,GAAAsB,MAAA,CAAAd,KAAA;UACR,IAAI,CAACM,MAAM,CAACd,GAAC,CAACvC,KAAK,CAAC,EAAE;YAClBqB,QAAQ,CAACkB,GAAC,CAACvC,KAAK,CAAC,GAAGuB,SAAS;YAC7BL,OAAO,CAACqB,GAAC,CAACvC,KAAK,CAAC,GAAG,IAAI;UAC3B,CAAC,MAAM;YACHoD,kBAAkB,CAAC/C,IAAI,CAACkC,GAAC,CAAC;YAC1Be,GAAG,CAACf,GAAC,CAACvC,KAAK,CAAC,GAAG,CAAC;UACpB;QACJ;MAAC,SAAAgD,GAAA;QAAAY,UAAA,CAAAX,CAAA,CAAAD,GAAA;MAAA;QAAAY,UAAA,CAAAV,CAAA;MAAA;MACDC,SAAS,CAACtD,MAAM,GAAG,CAAC;MACpBiE,MAAM,CAACnC,IAAI,CAAC0B,MAAM,CAAC,CAACrC,OAAO,CAAC,UAAA+C,GAAG;QAAA,OAAI,OAAOV,MAAM,CAACU,GAAG,CAAC;MAAA,EAAC;MACtD,IAAIC,OAAO,GAAGjC,WAAW;MAGzB,KAAK,IAAI7B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkD,kBAAkB,CAACvD,MAAM,EAAEK,CAAC,EAAE,EAAE;QAChD,IAAM+D,CAAC,GAAGb,kBAAkB,CAAClD,CAAC,CAAC;QAC/B,IAAI,CAACgB,OAAO,CAAC+C,CAAC,CAACjE,KAAK,CAAC,EAAE;UACnB,IAAIqB,QAAQ,CAAC4C,CAAC,CAACjE,KAAK,CAAC,KAAK,CAAC,CAAC,EAAEqB,QAAQ,CAAC4C,CAAC,CAACjE,KAAK,CAAC,GAAGuB,SAAS;UAC3DL,OAAO,CAAC+C,CAAC,CAACjE,KAAK,CAAC,GAAG,IAAI;UAEvB,IAAIkE,WAAW,GAAGF,OAAO;UACzB,IAAIjC,YAAW,GAAG,CAAC;UACnB,IAAMoC,WAAW,GAAG,EAAE;UACtB,IAAAhC,oBAAQ,EAACrB,IAAI,EAAEmD,CAAC,EAAEE,WAAW,EAAE1D,GAAG,CAAC;UAEnC,SAAA2D,GAAA,MAAAC,YAAA,GAAgBF,WAAW,EAAAC,GAAA,GAAAC,YAAA,CAAAxE,MAAA,EAAAuE,GAAA,IAAE;YAAxB,IAAM7B,EAAC,GAAA8B,YAAA,CAAAD,GAAA;YACR,IAAI,CAAClD,OAAO,CAACqB,EAAC,CAACvC,KAAK,CAAC,EAAE;cACnB,IAAMsE,WAAW,GAAGvF,UAAU,CAACkF,CAAC,EAAE1B,EAAC,CAAC;cACpC,IAAMgC,WAAW,GAAGxF,UAAU,CAACgB,CAAC,EAAEwC,EAAC,CAAC;cACpC,IAAIgC,WAAW,GAAG5D,OAAO,IAAI2D,WAAW,GAAG3D,OAAO,EAAE;gBAChDoB,YAAW,GAAG7C,IAAI,CAACuD,GAAG,CAAC6B,WAAW,EAAEvC,YAAW,CAAC;gBAChDmC,WAAW,GAAGhF,IAAI,CAACuD,GAAG,CAACyB,WAAW,EAAEK,WAAW,CAAC;cACpD;YACJ;UACJ;UAEA,IAAIxC,YAAW,IAAIrB,OAAO,EAAE;YACxBsD,OAAO,GAAG9E,IAAI,CAACuD,GAAG,CAACyB,WAAW,EAAEF,OAAO,CAAC;YACxC,IAAMQ,UAAU,GAAG,EAAE;YAAC,IAAAC,UAAA,OAAA9B,2BAAA,CAAAjB,OAAA,EACNyC,WAAW;cAAAO,MAAA;YAAA;cAA3B,KAAAD,UAAA,CAAA5B,CAAA,MAAA6B,MAAA,GAAAD,UAAA,CAAA7E,CAAA,IAAAkD,IAAA,GAA6B;gBAAA,IAAlBP,GAAC,GAAAmC,MAAA,CAAA3B,KAAA;gBACR,IAAIO,GAAG,CAACf,GAAC,CAACvC,KAAK,CAAC,KAAG,CAAC,IAAI,CAACkB,OAAO,CAACqB,GAAC,CAACvC,KAAK,CAAC,EAAE;kBACvCwE,UAAU,CAACnE,IAAI,CAACkC,GAAC,CAAC;gBACtB;cACJ;YAAC,SAAAS,GAAA;cAAAyB,UAAA,CAAAxB,CAAA,CAAAD,GAAA;YAAA;cAAAyB,UAAA,CAAAvB,CAAA;YAAA;YAED,IAAMyB,SAAS,GAAGtF,UAAU,CAACmF,UAAU,CAAC;YAAC,IAAAI,UAAA,OAAAjC,2BAAA,CAAAjB,OAAA,EACzBiD,SAAS;cAAAE,MAAA;YAAA;cAAzB,KAAAD,UAAA,CAAA/B,CAAA,MAAAgC,MAAA,GAAAD,UAAA,CAAAhF,CAAA,IAAAkD,IAAA,GAA2B;gBAAA,IAAhBP,GAAC,GAAAsC,MAAA,CAAA9B,KAAA;gBAAeM,MAAM,CAACd,GAAC,CAAC,GAAG,IAAI;cAAA;YAAC,SAAAS,GAAA;cAAA4B,UAAA,CAAA3B,CAAA,CAAAD,GAAA;YAAA;cAAA4B,UAAA,CAAA1B,CAAA;YAAA;YAAA,IAAA4B,UAAA,OAAAnC,2BAAA,CAAAjB,OAAA,EAE5ByC,WAAW;cAAAY,MAAA;YAAA;cAA3B,KAAAD,UAAA,CAAAjC,CAAA,MAAAkC,MAAA,GAAAD,UAAA,CAAAlF,CAAA,IAAAkD,IAAA,GAA6B;gBAAA,IAAlBP,GAAC,GAAAwC,MAAA,CAAAhC,KAAA;gBACR,IAAIO,GAAG,CAACf,GAAC,CAACvC,KAAK,CAAC,KAAG,CAAC,IAAI,CAACqD,MAAM,CAACd,GAAC,CAACvC,KAAK,CAAC,EAAE;kBACtCkB,OAAO,CAACqB,GAAC,CAACvC,KAAK,CAAC,GAAG,IAAI;kBACvB,IAAIqB,QAAQ,CAACkB,GAAC,CAACvC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAEqB,QAAQ,CAACkB,GAAC,CAACvC,KAAK,CAAC,GAAGuB,SAAS;gBAC/D,CAAC,MAAM;kBACH;kBACA6B,kBAAkB,CAAC/C,IAAI,CAACkC,GAAC,CAAC;kBAC1Be,GAAG,CAACf,GAAC,CAACvC,KAAK,CAAC,GAAG,CAAC;gBACpB;cACJ;YAAC,SAAAgD,GAAA;cAAA8B,UAAA,CAAA7B,CAAA,CAAAD,GAAA;YAAA;cAAA8B,UAAA,CAAA5B,CAAA;YAAA;UACL;UACAY,MAAM,CAACnC,IAAI,CAAC0B,MAAM,CAAC,CAACrC,OAAO,CAAC,UAAA+C,GAAG;YAAA,OAAI,OAAOV,MAAM,CAACU,GAAG,CAAC;UAAA,EAAC;QAC1D;MACJ;MAEAvC,SAAS,CAAC3B,MAAM,GAAG,CAAC;MACpB,KAAK,IAAIK,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGZ,MAAM,CAACO,MAAM,EAAEK,GAAC,EAAE,EAAE;QACpC,IAAI,CAACgB,OAAO,CAAChB,GAAC,CAAC,EAAEsB,SAAS,CAACnB,IAAI,CAACH,GAAC,CAAC;MACtC;MACAoB,UAAU,CAACjB,IAAI,CAAC;QAAEL,KAAK,EAAED,CAAC,CAACC,KAAK;QAAEgF,IAAI,EAAEhB;MAAQ,CAAC,CAAC;IACtD,CAAC,MAAM;MACH3C,QAAQ,CAACtB,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC1B;EACJ,CAAC;EA7GD,OAAOwB,SAAS,CAAC3B,MAAM,GAAG,CAAC;IAAA+B,KAAA;EAAA;EA+G3B,OAAO;IAAEP,QAAQ,EAARA,QAAQ;IAAEC,UAAU,EAAVA;EAAW,CAAC;AACnC","ignoreList":[]}]}