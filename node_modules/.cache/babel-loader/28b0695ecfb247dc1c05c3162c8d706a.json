{"remainingRequest":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js!E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\algo\\tdbscan.js","dependencies":[{"path":"E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\algo\\tdbscan.js","mtime":1727268112771},{"path":"E:\\GitProject\\T-DBSCAN\\babel.config.js","mtime":1677117676000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1720856214296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["_pubMethods","require","calTimeDis","p1","p2","Math","abs","timestamp","convexHull","points","sort","a","b","lng","lat","n","length","map","p","index","hull","i","cross","pop","push","t","o","tdbscan","eps","minTime","maxTime","rootRegion","Region","root","QuadTreeNode","forEach","insertEle","visited","Array","fill","clusters","CorePoints","clusterId","unvisited","_toConsumableArray2","default","keys","_loop","pIndex","shift","maxStayTime","point","ElePoint","EpsResults","queryEle","pointTemp","EpsResultsTemp","elementA","disTime","max","conPoints","neighborhoodVertex","peakmp","mmp","_iterator","_createForOfIteratorHelper2","_step","s","done","v","value","err","e","f","peaks","_iterator2","_step2","_iterator3","_step3","Object","key","q","maxStayTempTime","Results","TempResults","j","_readOnlyError2","tempPoints","_iterator4","_step4","tempPeaks","_iterator5","_step5","_iterator6","_step6"],"sources":["E:/GitProject/T-DBSCAN/src/views/AMyWork/tools/algo/tdbscan.js"],"sourcesContent":["import {Region}  from './pubMethods'\r\nimport {ElePoint}  from './pubMethods'\r\nimport {QuadTreeNode}  from './pubMethods'\r\nimport {insertEle,queryEle} from './pubMethods'\r\n\r\n\r\nfunction calTimeDis(p1, p2) {\r\n    return Math.abs(p1.timestamp - p2.timestamp)/(60*60*24); // 时间差，单位为秒\r\n}\r\n\r\nfunction convexHull(points) {\r\n    points.sort((a, b) => a.lng - b.lng || a.lat - b.lat);\r\n    const n = points.length;\r\n    if (n < 3) return points.map(p => p.index);\r\n\r\n    const hull = [];\r\n    for (let i = 0; i < n; i++) {\r\n        while (hull.length >= 2 && cross(hull[hull.length - 2], hull[hull.length - 1], points[i]) <= 0) {\r\n            hull.pop();\r\n        }\r\n        hull.push(points[i]);\r\n    }\r\n    for (let i = n - 2, t = hull.length + 1; i >= 0; i--) {\r\n        while (hull.length >= t && cross(hull[hull.length - 2], hull[hull.length - 1], points[i]) <= 0) {\r\n            hull.pop();\r\n        }\r\n        hull.push(points[i]);\r\n    }\r\n    hull.pop();\r\n    return hull.map(p => p.index);\r\n}\r\n\r\nfunction cross(o, a, b) {\r\n    return (a.lng - o.lng) * (b.lat - o.lat) - (a.lat - o.lat) * (b.lng - o.lng);\r\n}\r\n\r\nexport function tdbscan(points, eps, minTime, maxTime) {\r\n    \r\n    // 一些初始化工作、建立四叉树索引，访问数组全部置为false、聚类簇设置为-1\r\n    const rootRegion = new Region(-90, 90, -180, 180)\r\n    const root = new QuadTreeNode(1, rootRegion)\r\n    var points = points\r\n    points.forEach((p, index) => {\r\n        p.index = index\r\n        insertEle(root, p)\r\n    });\r\n    let visited = Array(points.length).fill(false)\r\n    let clusters = Array(points.length).fill(-1)\r\n    let CorePoints = []\r\n\r\n    let clusterId = -1\r\n    let unvisited = [...Array(points.length).keys()]\r\n    \r\n    \r\n    while (unvisited.length > 0) {\r\n        const pIndex = unvisited.shift()\r\n        const p = points[pIndex]\r\n        visited[pIndex] = true\r\n\r\n        let maxStayTime = 0;\r\n        const point = new ElePoint(p.lat, p.lng, p.timestamp, p.index)\r\n        let EpsResults = []\r\n        queryEle(root, point, EpsResults, eps)\r\n        EpsResults.sort((a,b)=> a.timestamp - b.timestamp)\r\n        let index = 0\r\n        let pointTemp = EpsResults[index]\r\n\t\tlet EpsResultsTemp = []\r\n        for(let i = index + 1;i < EpsResults.length; i++){\r\n            const elementA = EpsResults[i]\r\n            if(!visited[elementA.index]){\r\n                const disTime = calTimeDis(elementA,pointTemp)\r\n                if(disTime <= maxTime){\r\n                    EpsResultsTemp.push(elementA)\r\n                    maxStayTime = Math.max(maxStayTime,calTimeDis(elementA,point))\r\n                    pointTemp = elementA\r\n                }else{\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        // 将需要扩展点代入\r\n        EpsResults = EpsResultsTemp\r\n       \r\n        // 满足时间阈值\r\n        if (maxStayTime >= minTime) {\r\n            // 创建一个新簇 将点point添加到\r\n            clusterId++;\r\n            clusters[pIndex] = clusterId;\r\n            const conPoints = [];\r\n            const neighborhoodVertex = [];\r\n            const peakmp = {};\r\n            const mmp = {};\r\n            for (const v of EpsResults) {\r\n                if (!visited[v.index]) conPoints.push(v);\r\n            }\r\n            // 只向凸包顶点拓展\r\n            const peaks = convexHull(conPoints);\r\n            for (const v of peaks) peakmp[v] = true;\r\n\r\n            for (const v of EpsResults) {\r\n                if (!peakmp[v.index]) {\r\n                    clusters[v.index] = clusterId;\r\n                    visited[v.index] = true;\r\n                } else {\r\n                    neighborhoodVertex.push(v);\r\n                    mmp[v.index] = 1;\r\n                }\r\n            }\r\n            conPoints.length = 0;\r\n            Object.keys(peakmp).forEach(key => delete peakmp[key]);  \r\n            // 继续拓展领域点 标记为核心点簇\r\n            for (let i = 0; i < neighborhoodVertex.length; i++) {\r\n                const q = neighborhoodVertex[i];\r\n                if (!visited[q.index]) {\r\n                    if (clusters[q.index] === -1) clusters[q.index] = clusterId;\r\n                    visited[q.index] = true;\r\n            \r\n                    let maxStayTempTime = 0\r\n                    const Results = []\r\n                    let TempResults = []\r\n                    queryEle(root,q,Results,eps)\r\n                    Results.sort((a,b) => a.timestamp - b.timestamp)\r\n                    index = 0\r\n                    pointTemp = Results[index]\r\n                    for(let j = index + 1;j < Results.length;j++){\r\n                        const elementA = Results[j]\r\n                        if(!visited[elementA.index]){\r\n                            const disTime = calTimeDis(elementA,pointTemp)\r\n                            if(disTime <= maxTime){\r\n                                TempResults.push(elementA)\r\n                                // 计算最大停歇时长\r\n                                maxStayTempTime = Math.max(maxStayTempTime,calTimeDis(q,elementA))\r\n                                pointTemp = elementA\r\n                            }else{\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                    Results = TempResults\r\n                    // 符合\r\n                    if (maxStayTempTime >= minTime) {\r\n                        const tempPoints = [];\r\n                        for (const v of Results) {\r\n                            if (mmp[v.index]!==1 || !visited[v.index]) {\r\n                                tempPoints.push(v);\r\n                            }\r\n                        }\r\n            \r\n                        const tempPeaks = convexHull(tempPoints);\r\n                        for (const v of tempPeaks) peakmp[v] = true;\r\n            \r\n                        for (const v of Results) {\r\n                            if (mmp[v.index]===1 || !peakmp[v.index]) {\r\n                                visited[v.index] = true;\r\n                                if (clusters[v.index] === -1) clusters[v.index] = clusterId;\r\n                            } else { \r\n                                // 添加判断条件，确保不重复添加元素到neighborhoodVertex\r\n                                neighborhoodVertex.push(v);\r\n                                mmp[v.index] = 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    Object.keys(peakmp).forEach(key => delete peakmp[key]); \r\n                }\r\n            }\r\n\r\n            unvisited.length = 0;\r\n            for (let i = 0; i < points.length; i++) {\r\n                if (!visited[i]) unvisited.push(i);\r\n            }\r\n            CorePoints.push({ index: p.index});\r\n        } else {\r\n            clusters[p.index] = -1;\r\n        }\r\n    }\r\n    return { clusters, CorePoints };\r\n}\r\n  \r\n  \r\n"],"mappings":"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","ignoreList":[]}]}