{"remainingRequest":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js!E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\GitProject\\T-DBSCAN\\src\\plugins\\shpwrite\\src\\geojson.js","dependencies":[{"path":"E:\\GitProject\\T-DBSCAN\\src\\plugins\\shpwrite\\src\\geojson.js","mtime":1713864392000},{"path":"E:\\GitProject\\T-DBSCAN\\babel.config.js","mtime":1677117676000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1720856214296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:cmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIik7Cm1vZHVsZS5leHBvcnRzLnBvaW50ID0ganVzdFR5cGUoIlBvaW50IiwgIlBPSU5UIik7Cm1vZHVsZS5leHBvcnRzLmxpbmUgPSBqdXN0VHlwZSgiTGluZVN0cmluZyIsICJQT0xZTElORSIpOwptb2R1bGUuZXhwb3J0cy5tdWx0aWxpbmUgPSBqdXN0VHlwZSgiTXVsdGlMaW5lU3RyaW5nIiwgIlBPTFlMSU5FIik7Cm1vZHVsZS5leHBvcnRzLnBvbHlnb24gPSBqdXN0VHlwZSgiUG9seWdvbiIsICJQT0xZR09OIik7Cm1vZHVsZS5leHBvcnRzLm11bHRpcG9seWdvbiA9IGp1c3RUeXBlKCJNdWx0aVBvbHlnb24iLCAiUE9MWUdPTiIpOwoKLyoqCiAqIEdlbmVyYXRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBnZW9tZXRyaWVzLCBwcm9wZXJ0aWVzLCBhbmQgdHlwZSBvZiB0aGUgZ2l2ZW4gR2VvSlNPTiB0eXBlCiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIHRoZSBHZW9KU09OIHR5cGUKICogQHBhcmFtIHtzdHJpbmd9IFRZUEUgdGhlIFNoYXBlZmlsZSB0eXBlCiAqIEByZXR1cm5zIHsoZ2o6IHsgZmVhdHVyZXM6IEZlYXR1cmVbXSB9KSA9PiB7IGdlb21ldHJpZXM6IG51bWJlcltdIHwgbnVtYmVyW11bXSB8IG51bWJlcltdW11bXSB8IG51bWJlcltdW11bXVtdLCBwcm9wZXJ0aWVzOiB7T2JqZWN0LjxzdHJpbmcsIHN0cmluZz59LCB0eXBlOiBzdHJpbmcgfX0KICovCmZ1bmN0aW9uIGp1c3RUeXBlKGdqVHlwZSwgc2hwVHlwZSkgewogIHJldHVybiBmdW5jdGlvbiAoZ2opIHsKICAgIHZhciBvZnR5cGUgPSBnai5mZWF0dXJlcy5maWx0ZXIoaXNUeXBlKGdqVHlwZSkpOwogICAgcmV0dXJuIHsKICAgICAgZ2VvbWV0cmllczogc2hwVHlwZSA9PT0gJ1BPTFlMSU5FJyA/IG9mdHlwZS5tYXAoanVzdENvb3JkczIpIDogb2Z0eXBlLm1hcChqdXN0Q29vcmRzKSwKICAgICAgLy8gZ2VvbWV0cmllczogb2Z0eXBlLm1hcChqdXN0Q29vcmRzKSwKICAgICAgcHJvcGVydGllczogb2Z0eXBlLm1hcChqdXN0UHJvcHMpLAogICAgICB0eXBlOiBzaHBUeXBlCiAgICB9OwogIH07Cn0KCi8qKgogKgogKiBAcGFyYW0ge0ZlYXR1cmV9IGZlYXR1cmUgVGhlIGZlYXR1cmUgdG8gZ2V0IHRoZSBjb29yZGluYXRlcyBmcm9tCiAqIEByZXR1cm5zIHtudW1iZXJbXSB8IG51bWJlcltdW10gfCBudW1iZXJbXVtdW10gfCBudW1iZXJbXVtdW11bXX0KICovCmZ1bmN0aW9uIGp1c3RDb29yZHMoZmVhdHVyZSkgewogIHJldHVybiBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzOwp9Ci8vIOino+WGs+Wkmue6v+mXrumimCB3bSAyMDI0LjQuMjMKZnVuY3Rpb24ganVzdENvb3JkczIoZmVhdHVyZSkgewogIHJldHVybiBbZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc107Cn0KCi8qKgogKgogKiBAcGFyYW0ge0ZlYXR1cmV9IGZlYXR1cmUgVGhlIGZlYXR1cmUgdG8gZ2V0IHRoZSBwcm9wZXJ0aWVzIGZyb20KICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCBzdHJpbmc+fQogKi8KZnVuY3Rpb24ganVzdFByb3BzKGZlYXR1cmUpIHsKICByZXR1cm4gZmVhdHVyZS5wcm9wZXJ0aWVzOwp9CgovKioKICogR2VuZXJhdGUgYSBmdW5jdGlvbiB0aGF0IGZpbHRlcnMgZmVhdHVyZXMgYmFzZWQgb24gdGhlaXIgZ2VvbWV0cnkudHlwZQogKiBAcGFyYW0ge3N0cmluZyB8IHN0cmluZ1tdfSB0eXBlIHRoZSBHZW9KU09OIHR5cGUgdG8gZmlsdGVyIHdpdGgKICogQHJldHVybnMgeyhmOiBGZWF0dXJlKSA9PiBib29sZWFufSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0cnVlIGlmIHRoZSBmZWF0dXJlJ3MgdHlwZSBpcyBpbiB7QGxpbmsgdHlwZX0KICovCmZ1bmN0aW9uIGlzVHlwZSh0eXBlKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkodHlwZSkpIHJldHVybiBmdW5jdGlvbiAoZikgewogICAgcmV0dXJuIHR5cGUuaW5jbHVkZXMoZi5nZW9tZXRyeS50eXBlKTsKICB9O2Vsc2UgcmV0dXJuIGZ1bmN0aW9uIChmKSB7CiAgICByZXR1cm4gZi5nZW9tZXRyeS50eXBlID09PSB0eXBlOwogIH07Cn0="},{"version":3,"names":["module","exports","point","justType","line","multiline","polygon","multipolygon","gjType","shpType","gj","oftype","features","filter","isType","geometries","map","justCoords2","justCoords","properties","justProps","type","feature","geometry","coordinates","Array","isArray","f","includes"],"sources":["E:/GitProject/T-DBSCAN/src/plugins/shpwrite/src/geojson.js"],"sourcesContent":["module.exports.point = justType(\"Point\", \"POINT\");\nmodule.exports.line = justType(\"LineString\", \"POLYLINE\");\nmodule.exports.multiline = justType(\"MultiLineString\", \"POLYLINE\");\nmodule.exports.polygon = justType(\"Polygon\", \"POLYGON\");\nmodule.exports.multipolygon = justType(\"MultiPolygon\", \"POLYGON\");\n\n/**\n * Generate a function that returns an object with the geometries, properties, and type of the given GeoJSON type\n * @param {string} type the GeoJSON type\n * @param {string} TYPE the Shapefile type\n * @returns {(gj: { features: Feature[] }) => { geometries: number[] | number[][] | number[][][] | number[][][][], properties: {Object.<string, string>}, type: string }}\n */\nfunction justType(gjType, shpType) {\n  return function (gj) {\n    var oftype = gj.features.filter(isType(gjType));\n    return {\n      geometries: shpType === 'POLYLINE' ? oftype.map(justCoords2) : oftype.map(justCoords),\n      // geometries: oftype.map(justCoords),\n      properties: oftype.map(justProps),\n      type: shpType,\n    };\n  };\n}\n\n/**\n *\n * @param {Feature} feature The feature to get the coordinates from\n * @returns {number[] | number[][] | number[][][] | number[][][][]}\n */\nfunction justCoords(feature) {\n  return feature.geometry.coordinates;\n}\n// 解决多线问题 wm 2024.4.23\nfunction justCoords2(feature) {\n  return [feature.geometry.coordinates];\n}\n\n/**\n *\n * @param {Feature} feature The feature to get the properties from\n * @returns {Object.<string, string>}\n */\nfunction justProps(feature) {\n  return feature.properties;\n}\n\n/**\n * Generate a function that filters features based on their geometry.type\n * @param {string | string[]} type the GeoJSON type to filter with\n * @returns {(f: Feature) => boolean} a function that returns true if the feature's type is in {@link type}\n */\nfunction isType(type) {\n  if (Array.isArray(type))\n    return function (f) {\n      return type.includes(f.geometry.type);\n    };\n  else\n    return function (f) {\n      return f.geometry.type === type;\n    };\n}\n"],"mappings":";;;;;AAAAA,MAAM,CAACC,OAAO,CAACC,KAAK,GAAGC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC;AACjDH,MAAM,CAACC,OAAO,CAACG,IAAI,GAAGD,QAAQ,CAAC,YAAY,EAAE,UAAU,CAAC;AACxDH,MAAM,CAACC,OAAO,CAACI,SAAS,GAAGF,QAAQ,CAAC,iBAAiB,EAAE,UAAU,CAAC;AAClEH,MAAM,CAACC,OAAO,CAACK,OAAO,GAAGH,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC;AACvDH,MAAM,CAACC,OAAO,CAACM,YAAY,GAAGJ,QAAQ,CAAC,cAAc,EAAE,SAAS,CAAC;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQA,CAACK,MAAM,EAAEC,OAAO,EAAE;EACjC,OAAO,UAAUC,EAAE,EAAE;IACnB,IAAIC,MAAM,GAAGD,EAAE,CAACE,QAAQ,CAACC,MAAM,CAACC,MAAM,CAACN,MAAM,CAAC,CAAC;IAC/C,OAAO;MACLO,UAAU,EAAEN,OAAO,KAAK,UAAU,GAAGE,MAAM,CAACK,GAAG,CAACC,WAAW,CAAC,GAAGN,MAAM,CAACK,GAAG,CAACE,UAAU,CAAC;MACrF;MACAC,UAAU,EAAER,MAAM,CAACK,GAAG,CAACI,SAAS,CAAC;MACjCC,IAAI,EAAEZ;IACR,CAAC;EACH,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASS,UAAUA,CAACI,OAAO,EAAE;EAC3B,OAAOA,OAAO,CAACC,QAAQ,CAACC,WAAW;AACrC;AACA;AACA,SAASP,WAAWA,CAACK,OAAO,EAAE;EAC5B,OAAO,CAACA,OAAO,CAACC,QAAQ,CAACC,WAAW,CAAC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASJ,SAASA,CAACE,OAAO,EAAE;EAC1B,OAAOA,OAAO,CAACH,UAAU;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASL,MAAMA,CAACO,IAAI,EAAE;EACpB,IAAII,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EACrB,OAAO,UAAUM,CAAC,EAAE;IAClB,OAAON,IAAI,CAACO,QAAQ,CAACD,CAAC,CAACJ,QAAQ,CAACF,IAAI,CAAC;EACvC,CAAC,CAAC,KAEF,OAAO,UAAUM,CAAC,EAAE;IAClB,OAAOA,CAAC,CAACJ,QAAQ,CAACF,IAAI,KAAKA,IAAI;EACjC,CAAC;AACL","ignoreList":[]}]}