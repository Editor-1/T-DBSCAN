{"remainingRequest":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\babel-loader\\lib\\index.js!E:\\workspacevsCode\\web-ui-travel\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\workspacevsCode\\web-ui-travel\\src\\views\\AMyWork\\tools\\algo\\tdbscan.js","dependencies":[{"path":"E:\\workspacevsCode\\web-ui-travel\\src\\views\\AMyWork\\tools\\algo\\tdbscan.js","mtime":1722306813461},{"path":"E:\\workspacevsCode\\web-ui-travel\\babel.config.js","mtime":1677117676000},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1720856214296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["fs","require","readline","_require","performance","EARTH_RADIUS","MAX_DEPTH","Region","_createClass2","default","up","bottom","left","right","_classCallCheck2","ElePoint","lat","lng","time","index","QuadTreeNode","depth","region","is_leaf","LU","LB","RU","RB","ele_num","ele_list","Point","lon","deg2rad","deg","Math","PI","haversine","p1","p2","dLat","dLng","a","sin","cos","c","atan2","sqrt","cal_time_dis","time_dis","abs","timestamp","insertEle","node","ele","console","error","splitNode","push","mid_vertical","mid_horizontal","createChildNode","childNode","i","isInRange","center","point","radius","queryEle","results","result_count","j","cross","O","A","B","convexHull","points","n","length","hull","Array","peak","sort","b","k","t","arr","mp","Map","CorePoints","mmp","peaks","peakmap","T_DBSCAN","EPS","MinTime","maxTime","number","visited","fill","unvisited","from","_","set","p","shift","EpsResults","max_stay_time","root","vis_temp","dis_time","max","_iterator","_createForOfIteratorHelper2","_step","s","done","v","value","err","e","f","EpsPoints","apply","_toConsumableArray2","_i9","_peaks","clear","has","cmp_time","q","get","cmp_temp_time","pointResults","temp_point","temp_count","temp_dis_time","temp_cmp_time","_i12","_peaks2","stringToTimestamp","dateTimeStr","format","arguments","undefined","tm","ss","Date","_dateTimeStr$split","split","_dateTimeStr$split2","_slicedToArray2","datePart","timePart","_datePart$split$map","map","Number","_datePart$split$map2","year","month","day","_timePart$split$map","_timePart$split$map2","hour","minute","second","getTime","root_region","fileName","csv_data","createReadStream","rl","createInterface","input","crlfDelay","Infinity","on","line","words","ep","parseFloat","beforeTime","now","afterTime","log","duration_millsecond","_i14","_CorePoints","num","_iterator2","values","_step2","u","concat","convertDateStringToUnix","dateString","date"],"sources":["E:/workspacevsCode/web-ui-travel/src/views/AMyWork/tools/algo/tdbscan.js"],"sourcesContent":["const fs = require('fs');\r\nconst readline = require('readline');\r\nconst { performance } = require('perf_hooks');\r\n\r\nconst EARTH_RADIUS = 6371.0087455872; // Earth radius in kilometers\r\nconst MAX_DEPTH = 1000; // Maximum recursion depth limit\r\n\r\nclass Region {\r\n    constructor(up, bottom, left, right) {\r\n        this.up = up;\r\n        this.bottom = bottom;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nclass ElePoint {\r\n    constructor(lat, lng, time, index) {\r\n        this.lat = lat; // Latitude\r\n        this.lng = lng; // Longitude\r\n        this.time = time; // Time\r\n        this.index = index; // Index\r\n    }\r\n}\r\n\r\nclass QuadTreeNode {\r\n    constructor(depth, region) {\r\n        this.depth = depth;\r\n        this.is_leaf = true;\r\n        this.region = region;\r\n        this.LU = null; // Left-upper child node pointer\r\n        this.LB = null; // Left-bottom child node pointer\r\n        this.RU = null; // Right-upper child node pointer\r\n        this.RB = null; // Right-bottom child node pointer\r\n        this.ele_num = 0; // Number of location points\r\n        this.ele_list = []; // List of location points\r\n    }\r\n}\r\n\r\nclass Point {\r\n    constructor(lat, lon, index) {\r\n        this.lat = lat;\r\n        this.lon = lon;\r\n        this.index = index;\r\n    }\r\n}\r\n\r\nfunction deg2rad(deg) {\r\n    return deg * (Math.PI / 180);\r\n}\r\n\r\nfunction haversine(p1, p2) {\r\n    const dLat = deg2rad(p2.lat - p1.lat);\r\n    const dLng = deg2rad(p2.lng - p1.lng);\r\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(deg2rad(p1.lat)) * Math.cos(deg2rad(p2.lat)) *\r\n        Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return EARTH_RADIUS * c;\r\n}\r\n\r\nfunction cal_time_dis(p1, p2) {\r\n    const time_dis = Math.abs(p1.timestamp - p2.timestamp) / 86400;\r\n    return time_dis;\r\n}\r\n\r\nfunction insertEle(node, ele) {\r\n    if (node.depth > MAX_DEPTH) {\r\n        console.error(\"Exceeded maximum depth\");\r\n        return;\r\n    }\r\n\r\n    if (node.is_leaf) {\r\n        if (node.ele_num >= 90) {\r\n            splitNode(node);\r\n            insertEle(node, ele);\r\n        } else {\r\n            node.ele_list.push(ele);\r\n            node.ele_num++;\r\n        }\r\n        return;\r\n    }\r\n\r\n    const mid_vertical = (node.region.up + node.region.bottom) / 2;\r\n    const mid_horizontal = (node.region.left + node.region.right) / 2;\r\n\r\n    if (ele.lat > mid_vertical) {\r\n        if (ele.lng > mid_horizontal) {\r\n            insertEle(node.RU, ele);\r\n        } else {\r\n            insertEle(node.LU, ele);\r\n        }\r\n    } else {\r\n        if (ele.lng > mid_horizontal) {\r\n            insertEle(node.RB, ele);\r\n        } else {\r\n            insertEle(node.LB, ele);\r\n        }\r\n    }\r\n}\r\n\r\nfunction createChildNode(node, bottom, up, left, right) {\r\n    const depth = node.depth + 1;\r\n    const region = new Region(up, bottom, left, right);\r\n    const childNode = new QuadTreeNode(depth, region);\r\n    return childNode;\r\n}\r\n\r\nfunction splitNode(node) {\r\n    const mid_vertical = (node.region.up + node.region.bottom) / 2;\r\n    const mid_horizontal = (node.region.left + node.region.right) / 2;\r\n\r\n    node.is_leaf = false;\r\n    node.RU = createChildNode(node, mid_vertical, node.region.up, mid_horizontal, node.region.right);\r\n    node.LU = createChildNode(node, mid_vertical, node.region.up, node.region.left, mid_horizontal);\r\n    node.RB = createChildNode(node, node.region.bottom, mid_vertical, mid_horizontal, node.region.right);\r\n    node.LB = createChildNode(node, node.region.bottom, mid_vertical, node.region.left, mid_horizontal);\r\n\r\n    for (let i = 0; i < node.ele_num; i++) {\r\n        insertEle(node, node.ele_list[i]);\r\n    }\r\n    node.ele_num = 0; // Reset count\r\n}\r\n\r\nfunction isInRange(center, point, radius) {\r\n    return haversine(center, point) <= radius;\r\n}\r\n\r\nfunction queryEle(node, center, radius, results, result_count) {\r\n    if (node.depth > MAX_DEPTH) {\r\n        console.error(\"Exceeded maximum depth\");\r\n        return;\r\n    }\r\n\r\n    if (node.is_leaf) {\r\n        for (let j = 0; j < node.ele_num; j++) {\r\n            if (isInRange(center, node.ele_list[j], radius)) {\r\n                results[result_count[0]] = node.ele_list[j];\r\n                result_count[0]++;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    const mid_vertical = (node.region.up + node.region.bottom) / 2;\r\n    const mid_horizontal = (node.region.left + node.region.right) / 2;\r\n\r\n    if (center.lat + radius > mid_vertical) {\r\n        if (center.lng + radius > mid_horizontal) {\r\n            queryEle(node.RU, center, radius, results, result_count);\r\n        }\r\n        if (center.lng - radius < mid_horizontal) {\r\n            queryEle(node.LU, center, radius, results, result_count);\r\n        }\r\n    }\r\n    if (center.lat - radius < mid_vertical) {\r\n        if (center.lng + radius > mid_horizontal) {\r\n            queryEle(node.RB, center, radius, results, result_count);\r\n        }\r\n        if (center.lng - radius < mid_horizontal) {\r\n            queryEle(node.LB, center, radius, results, result_count);\r\n        }\r\n    }\r\n}\r\n\r\nfunction cross(O, A, B) {\r\n    return (A.lon - O.lon) * (B.lat - O.lat) - (A.lat - O.lat) * (B.lon - O.lon);\r\n}\r\n\r\nfunction convexHull(points) {\r\n    const n = points.length;\r\n    const hull = new Array(2 * n);\r\n    const peak = [];\r\n\r\n    if (n <= 3) {\r\n        for (let i = 0; i < n; i++) peak.push(points[i].index);\r\n        return peak;\r\n    }\r\n\r\n    points.sort((a, b) => a.lon < b.lon || (a.lon === b.lon && a.lat < b.lat));\r\n\r\n    let k = 0;\r\n    for (let i = 0; i < n; ++i) {\r\n        while (k >= 2 && cross(hull[k - 2], hull[k - 1], points[i]) <= 0) k--;\r\n        hull[k++] = points[i];\r\n    }\r\n\r\n    for (let i = n - 1, t = k + 1; i > 0; --i) {\r\n        while (k >= t && cross(hull[k - 2], hull[k - 1], points[i - 1]) <= 0) k--;\r\n        hull[k++] = points[i - 1];\r\n    }\r\n\r\n    for (let i = 0; i < k - 1; i++) {\r\n        peak.push(hull[i].index);\r\n    }\r\n\r\n    return peak;\r\n}\r\n\r\nconst arr = [];\r\nconst mp = new Map(); // Statistical clustering result set\r\nconst CorePoints = [];\r\nconst mmp = new Map(); // Delete unused aggregation points | Points already in N\r\nconst peaks = []; // Top corner\r\nconst peakmap = new Map(); // Mark\r\n\r\nfunction T_DBSCAN(EPS, MinTime, maxTime, number) {\r\n    const visited = new Array(number).fill(0);\r\n    const unvisited = Array.from({ length: number }, (_, i) => i);\r\n\r\n    for (let i = 0; i < number; i++) {\r\n        mp.set(i, -1);\r\n    }\r\n\r\n    let k = -1;\r\n    while (unvisited.length > 0) {\r\n        const p = arr[unvisited[0]];\r\n        visited[unvisited[0]] = 1;\r\n        unvisited.shift(); // Mark as visited, remove from unvisited\r\n\r\n        const EpsResults = [];\r\n        const point = new ElePoint(p.lat, p.lng, p.timestamp, p.index);\r\n        let max_stay_time = 0;\r\n        const result_count = [0];\r\n        queryEle(root, point, EPS, EpsResults, result_count);\r\n\r\n        const vis_temp = [];\r\n        for (let i = 0; i < result_count[0]; i++) {\r\n            if (!visited[EpsResults[i].index]) {\r\n                const dis_time = cal_time_dis(p, arr[EpsResults[i].index]);\r\n                if (dis_time < maxTime) {\r\n                    max_stay_time = Math.max(max_stay_time, dis_time);\r\n                } else {\r\n                    vis_temp.push(EpsResults[i].index); // Temporarily store, mark as core point\r\n                }\r\n            }\r\n        }\r\n\r\n        if (max_stay_time >= MinTime) {\r\n            for (const v of vis_temp) visited[v] = 1;\r\n\r\n            k = k + 1; // Add a new cluster\r\n            mp.set(p.index, k);\r\n            const points = []; // Place valid neighborhood points for convex hull processing\r\n            const EpsPoints = []; // Store neighborhood vertices\r\n            for (let i = 0; i < result_count[0]; i++) {\r\n                if (!visited[EpsResults[i].index]) { // Exclude interference points\r\n                    points.push(new Point(EpsResults[i].lat, EpsResults[i].lng, EpsResults[i].index));\r\n                }\r\n            }\r\n            peaks.length = 0;\r\n            peaks.push(...convexHull(points)); // Find convex hull vertices\r\n            for (const v of peaks) peakmap.set(v, 1); // Mark to retain vertex mark, mark other points as visited and cluster mark\r\n            mmp.clear(); // mmp is used to count the points in the neighborhood of p that need to be expanded\r\n            for (let i = 0; i < result_count[0]; i++) {\r\n                if (!peakmap.has(EpsResults[i].index)) {\r\n                    visited[EpsResults[i].index] = 1;\r\n                    mp.set(EpsResults[i].index, k);\r\n                } else {\r\n                    EpsPoints.push(new ElePoint(EpsResults[i].lat, EpsResults[i].lng, EpsResults[i].time, EpsResults[i].index));\r\n                    mmp.set(EpsResults[i].index, 1);\r\n                }\r\n            }\r\n            peaks.length = 0;\r\n            peakmap.clear();\r\n            points.length = 0; // Clear containers\r\n            let cmp_time = max_stay_time; // Statistical maximum time for this cluster\r\n\r\n            for (let i = 0; i < EpsPoints.length; i++) {\r\n                const q = arr[EpsPoints[i].index];\r\n                if (!visited[q.index]) {\r\n                    if (mp.get(q.index) === -1) mp.set(q.index, k);\r\n                    visited[q.index] = 1;\r\n                    let cmp_temp_time = cmp_time;\r\n                    const pointResults = [];\r\n                    const temp_point = new ElePoint(q.lat, q.lng, q.timestamp, q.index);\r\n                    max_stay_time = 0;\r\n                    const temp_count = [0];\r\n                    queryEle(root, temp_point, EPS, pointResults, temp_count);\r\n                    for (let j = 0; j < temp_count[0]; j++) {\r\n                        if (!visited[pointResults[j].index]) {\r\n                            const temp_dis_time = cal_time_dis(q, arr[pointResults[j].index]);\r\n                            const temp_cmp_time = cal_time_dis(p, arr[pointResults[j].index]);\r\n                            if (temp_cmp_time < maxTime && temp_dis_time < maxTime) {\r\n                                max_stay_time = Math.max(temp_dis_time, max_stay_time);\r\n                                cmp_temp_time = Math.max(cmp_temp_time, temp_cmp_time);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (max_stay_time >= MinTime) {\r\n                        cmp_time = Math.max(cmp_temp_time, cmp_time);\r\n                        for (let j = 0; j < temp_count[0]; j++) {\r\n                            if (!mmp.has(pointResults[j].index) && !visited[pointResults[j].index]) {\r\n                                points.push(new Point(pointResults[j].lat, pointResults[j].lng, pointResults[j].index));\r\n                            }\r\n                        }\r\n                        peaks.length = 0;\r\n                        peaks.push(...convexHull(points)); // Find convex hull vertices\r\n                        for (const v of peaks) peakmap.set(v, 1);\r\n                        for (let j = 0; j < temp_count[0]; j++) {\r\n                            if (!mmp.has(pointResults[j].index) && !peakmap.has(pointResults[j].index)) {\r\n                                visited[pointResults[j].index] = 1;\r\n                                if (mp.get(pointResults[j].index) === -1) mp.set(pointResults[j].index, k);\r\n                            } else {\r\n                                EpsPoints.push(new ElePoint(pointResults[j].lat, pointResults[j].lng, pointResults[j].time, pointResults[j].index));\r\n                                mmp.set(EpsResults[i].index, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    peaks.length = 0;\r\n                    peakmap.clear();\r\n                    points.length = 0; // Clear containers\r\n                }\r\n            }\r\n\r\n            unvisited.length = 0;\r\n            for (let i = 0; i < number; i++) if (!visited[i]) unvisited.push(i);\r\n            CorePoints.push({ index: p.index, time: cmp_time });\r\n        } else {\r\n            mp.set(p.index, -1); // Mark p as a noise point\r\n        }\r\n        vis_temp.length = 0; // Clear temporary interference point mark\r\n    }\r\n}\r\n\r\nfunction stringToTimestamp(dateTimeStr, format = \"%Y/%m/%d %H:%M:%S\") {\r\n    const tm = {};\r\n    const ss = new Date(dateTimeStr);\r\n    const [datePart, timePart] = dateTimeStr.split(' ');\r\n    const [year, month, day] = datePart.split('/').map(Number);\r\n    const [hour, minute, second] = timePart.split(':').map(Number);\r\n    tm.year = year;\r\n    tm.month = month - 1; // JavaScript months are 0-based\r\n    tm.day = day;\r\n    tm.hour = hour;\r\n    tm.minute = minute;\r\n    tm.second = second;\r\n\r\n    const timestamp = new Date(year, month - 1, day, hour, minute, second).getTime() / 1000;\r\n    return timestamp;\r\n}\r\n\r\nconst root_region = new Region(-90, 90, -180, 180);\r\nconst root = new QuadTreeNode(0, root_region);\r\n\r\nconst fileName = \"C:\\\\Users\\\\何心武\\\\Desktop\\\\T-DBSCAN聚类\\\\灰鹤位点all - 副本.csv\";\r\nconst csv_data = fs.createReadStream(fileName);\r\nconst rl = readline.createInterface({\r\n    input: csv_data,\r\n    crlfDelay: Infinity\r\n});\r\n\r\nlet i = 0;\r\nrl.on('line', (line) => {\r\n    if (i === 0) {\r\n        i++;\r\n        return; // Skip header line\r\n    }\r\n    const words = line.split(',');\r\n    const ep = new ElePoint();\r\n    ep.time = stringToTimestamp(words[0]);\r\n    ep.lat = parseFloat(words[1]);\r\n    ep.lng = parseFloat(words[2]);\r\n    ep.index = i++;\r\n    const p = { index: ep.index, lat: ep.lat, lng: ep.lng, timestamp: ep.time };\r\n    arr.push(p);\r\n    insertEle(root, ep);\r\n});\r\n\r\nrl.on('close', () => {\r\n    const beforeTime = performance.now();\r\n    T_DBSCAN(25, 3, 130, i);\r\n    const afterTime = performance.now();\r\n    console.log(\"总耗时:\");\r\n    const duration_millsecond = afterTime - beforeTime;\r\n    console.log(duration_millsecond + \"毫秒\");\r\n    console.log(\"完成聚合，核心点点数为：\" + CorePoints.length);\r\n    for (const p of CorePoints) {\r\n        let num = 0;\r\n        for (const u of mp.values()) {\r\n            if (u === mp.get(arr[p.index].index)) {\r\n                ++num;\r\n            }\r\n        }\r\n        console.log(`${arr[p.index].index}  ${arr[p.index].lat}  ${arr[p.index].lng}  ${p.time} ${num}`);\r\n    }\r\n});\r\n\r\nexport function convertDateStringToUnix(dateString) {  \r\n    // 尝试使用 Date 构造函数解析日期字符串  \r\n    const date = new Date(dateString)\r\n    // 返回 Unix 时间戳（毫秒）  \r\n    return date.getTime()/1000\r\n}  "],"mappings":"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","ignoreList":[]}]}