{"remainingRequest":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js!E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\algo\\clarans.js","dependencies":[{"path":"E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\algo\\clarans.js","mtime":1726623643568},{"path":"E:\\GitProject\\T-DBSCAN\\babel.config.js","mtime":1677117676000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1720856214296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNsYXJhbnMgPSBjbGFyYW5zOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucHVzaC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnNldC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIik7CnZhciBfcHViTWV0aG9kcyA9IHJlcXVpcmUoIi4vcHViTWV0aG9kcyIpOwpmdW5jdGlvbiBjbGFyYW5zKGRhdGEsIGssIG51bUxvY2FsLCBtYXhOZWlnaGJvcikgewogIC8vIOiuoeeul+iBmuexu+e7k+aenOeahOaAu+aIkOacrAogIGZ1bmN0aW9uIGNhbGN1bGF0ZVRvdGFsQ29zdChkYXRhLCBtZWRvaWRzKSB7CiAgICB2YXIgdG90YWxDb3N0ID0gMDsKICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAocG9pbnQpIHsKICAgICAgdmFyIG1pbkRpc3QgPSBJbmZpbml0eTsKICAgICAgbWVkb2lkcy5mb3JFYWNoKGZ1bmN0aW9uIChtZWRvaWQpIHsKICAgICAgICB2YXIgZGlzdCA9ICgwLCBfcHViTWV0aG9kcy5jYWxjdWxhdGVEaXN0YW5jZSkocG9pbnQsIG1lZG9pZCk7CiAgICAgICAgaWYgKGRpc3QgPCBtaW5EaXN0KSB7CiAgICAgICAgICBtaW5EaXN0ID0gZGlzdDsKICAgICAgICB9CiAgICAgIH0pOwogICAgICB0b3RhbENvc3QgKz0gbWluRGlzdDsKICAgIH0pOwogICAgcmV0dXJuIHRvdGFsQ29zdDsKICB9CgogIC8vIOWIneWni+WMlm1lZG9pZHMKICBmdW5jdGlvbiBpbml0aWFsaXplTWVkb2lkcyhkYXRhLCBrKSB7CiAgICB2YXIgbWVkb2lkcyA9IFtdOwogICAgdmFyIHVzZWRJbmRpY2VzID0gbmV3IFNldCgpOwogICAgd2hpbGUgKG1lZG9pZHMubGVuZ3RoIDwgaykgewogICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBkYXRhLmxlbmd0aCk7CiAgICAgIGlmICghdXNlZEluZGljZXMuaGFzKGluZGV4KSkgewogICAgICAgIG1lZG9pZHMucHVzaChkYXRhW2luZGV4XSk7CiAgICAgICAgdXNlZEluZGljZXMuYWRkKGluZGV4KTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG1lZG9pZHM7CiAgfQoKICAvLyBDTEFSQU5T566X5rOV5Li75Ye95pWwCiAgdmFyIGJlc3RNZWRvaWRzID0gaW5pdGlhbGl6ZU1lZG9pZHMoZGF0YSwgayk7CiAgdmFyIGJlc3RDb3N0ID0gY2FsY3VsYXRlVG90YWxDb3N0KGRhdGEsIGJlc3RNZWRvaWRzKTsKICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUxvY2FsOyBpKyspIHsKICAgIHZhciBjdXJyZW50TWVkb2lkcyA9IGluaXRpYWxpemVNZWRvaWRzKGRhdGEsIGspOwogICAgdmFyIGN1cnJlbnRDb3N0ID0gY2FsY3VsYXRlVG90YWxDb3N0KGRhdGEsIGN1cnJlbnRNZWRvaWRzKTsKICAgIHZhciBuZWlnaGJvckNvdW50ZXIgPSAwOwogICAgd2hpbGUgKG5laWdoYm9yQ291bnRlciA8IG1heE5laWdoYm9yKSB7CiAgICAgIC8vIOmaj+acuumAieaLqeS4gOS4qm1lZG9pZOW5tuWwneivleabv+aNogogICAgICB2YXIgcmFuZG9tTWVkb2lkSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBrKTsKICAgICAgdmFyIHJhbmRvbU5vbk1lZG9pZEluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZGF0YS5sZW5ndGgpOwogICAgICB2YXIgbmV3TWVkb2lkcyA9IGN1cnJlbnRNZWRvaWRzLnNsaWNlKCk7CiAgICAgIG5ld01lZG9pZHNbcmFuZG9tTWVkb2lkSW5kZXhdID0gZGF0YVtyYW5kb21Ob25NZWRvaWRJbmRleF07CiAgICAgIHZhciBuZXdDb3N0ID0gY2FsY3VsYXRlVG90YWxDb3N0KGRhdGEsIG5ld01lZG9pZHMpOwogICAgICBpZiAobmV3Q29zdCA8IGN1cnJlbnRDb3N0KSB7CiAgICAgICAgY3VycmVudE1lZG9pZHMgPSBuZXdNZWRvaWRzOwogICAgICAgIGN1cnJlbnRDb3N0ID0gbmV3Q29zdDsKICAgICAgICBuZWlnaGJvckNvdW50ZXIgPSAwOyAvLyDph43nva5uZWlnaGJvcuiuoeaVsOWZqAogICAgICB9IGVsc2UgewogICAgICAgIG5laWdoYm9yQ291bnRlcisrOwogICAgICB9CiAgICB9CiAgICBpZiAoY3VycmVudENvc3QgPCBiZXN0Q29zdCkgewogICAgICBiZXN0TWVkb2lkcyA9IGN1cnJlbnRNZWRvaWRzOwogICAgICBiZXN0Q29zdCA9IGN1cnJlbnRDb3N0OwogICAgfQogIH0KICByZXR1cm4gYmVzdE1lZG9pZHM7Cn0="},{"version":3,"names":["_pubMethods","require","clarans","data","k","numLocal","maxNeighbor","calculateTotalCost","medoids","totalCost","forEach","point","minDist","Infinity","medoid","dist","calculateDistance","initializeMedoids","usedIndices","Set","length","index","Math","floor","random","has","push","add","bestMedoids","bestCost","i","currentMedoids","currentCost","neighborCounter","randomMedoidIndex","randomNonMedoidIndex","newMedoids","slice","newCost"],"sources":["E:/GitProject/T-DBSCAN/src/views/AMyWork/tools/algo/clarans.js"],"sourcesContent":["import {calculateDistance} from './pubMethods'\r\nexport function clarans(data, k, numLocal, maxNeighbor) {\r\n    // 计算聚类结果的总成本\r\n    function calculateTotalCost(data, medoids) {\r\n        let totalCost = 0;\r\n        data.forEach(point => {\r\n            let minDist = Infinity;\r\n            medoids.forEach(medoid => {\r\n                const dist = calculateDistance(point, medoid);\r\n                if (dist < minDist) {\r\n                    minDist = dist;\r\n                }\r\n            });\r\n            totalCost += minDist;\r\n        });\r\n        return totalCost;\r\n    }\r\n\r\n    // 初始化medoids\r\n    function initializeMedoids(data, k) {\r\n        const medoids = [];\r\n        const usedIndices = new Set();\r\n        while (medoids.length < k) {\r\n            const index = Math.floor(Math.random() * data.length);\r\n            if (!usedIndices.has(index)) {\r\n                medoids.push(data[index]);\r\n                usedIndices.add(index);\r\n            }\r\n        }\r\n        return medoids;\r\n    }\r\n\r\n    // CLARANS算法主函数\r\n    let bestMedoids = initializeMedoids(data, k);\r\n    let bestCost = calculateTotalCost(data, bestMedoids);\r\n\r\n    for (let i = 0; i < numLocal; i++) {\r\n        let currentMedoids = initializeMedoids(data, k);\r\n        let currentCost = calculateTotalCost(data, currentMedoids);\r\n        let neighborCounter = 0;\r\n\r\n        while (neighborCounter < maxNeighbor) {\r\n            // 随机选择一个medoid并尝试替换\r\n            const randomMedoidIndex = Math.floor(Math.random() * k);\r\n            const randomNonMedoidIndex = Math.floor(Math.random() * data.length);\r\n\r\n            const newMedoids = currentMedoids.slice();\r\n            newMedoids[randomMedoidIndex] = data[randomNonMedoidIndex];\r\n\r\n            const newCost = calculateTotalCost(data, newMedoids);\r\n\r\n            if (newCost < currentCost) {\r\n                currentMedoids = newMedoids;\r\n                currentCost = newCost;\r\n                neighborCounter = 0; // 重置neighbor计数器\r\n            } else {\r\n                neighborCounter++;\r\n            }\r\n        }\r\n\r\n        if (currentCost < bestCost) {\r\n            bestMedoids = currentMedoids;\r\n            bestCost = currentCost;\r\n        }\r\n    }\r\n\r\n    return bestMedoids;\r\n}\r\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,WAAA,GAAAC,OAAA;AACO,SAASC,OAAOA,CAACC,IAAI,EAAEC,CAAC,EAAEC,QAAQ,EAAEC,WAAW,EAAE;EACpD;EACA,SAASC,kBAAkBA,CAACJ,IAAI,EAAEK,OAAO,EAAE;IACvC,IAAIC,SAAS,GAAG,CAAC;IACjBN,IAAI,CAACO,OAAO,CAAC,UAAAC,KAAK,EAAI;MAClB,IAAIC,OAAO,GAAGC,QAAQ;MACtBL,OAAO,CAACE,OAAO,CAAC,UAAAI,MAAM,EAAI;QACtB,IAAMC,IAAI,GAAG,IAAAC,6BAAiB,EAACL,KAAK,EAAEG,MAAM,CAAC;QAC7C,IAAIC,IAAI,GAAGH,OAAO,EAAE;UAChBA,OAAO,GAAGG,IAAI;QAClB;MACJ,CAAC,CAAC;MACFN,SAAS,IAAIG,OAAO;IACxB,CAAC,CAAC;IACF,OAAOH,SAAS;EACpB;;EAEA;EACA,SAASQ,iBAAiBA,CAACd,IAAI,EAAEC,CAAC,EAAE;IAChC,IAAMI,OAAO,GAAG,EAAE;IAClB,IAAMU,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC7B,OAAOX,OAAO,CAACY,MAAM,GAAGhB,CAAC,EAAE;MACvB,IAAMiB,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGrB,IAAI,CAACiB,MAAM,CAAC;MACrD,IAAI,CAACF,WAAW,CAACO,GAAG,CAACJ,KAAK,CAAC,EAAE;QACzBb,OAAO,CAACkB,IAAI,CAACvB,IAAI,CAACkB,KAAK,CAAC,CAAC;QACzBH,WAAW,CAACS,GAAG,CAACN,KAAK,CAAC;MAC1B;IACJ;IACA,OAAOb,OAAO;EAClB;;EAEA;EACA,IAAIoB,WAAW,GAAGX,iBAAiB,CAACd,IAAI,EAAEC,CAAC,CAAC;EAC5C,IAAIyB,QAAQ,GAAGtB,kBAAkB,CAACJ,IAAI,EAAEyB,WAAW,CAAC;EAEpD,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,QAAQ,EAAEyB,CAAC,EAAE,EAAE;IAC/B,IAAIC,cAAc,GAAGd,iBAAiB,CAACd,IAAI,EAAEC,CAAC,CAAC;IAC/C,IAAI4B,WAAW,GAAGzB,kBAAkB,CAACJ,IAAI,EAAE4B,cAAc,CAAC;IAC1D,IAAIE,eAAe,GAAG,CAAC;IAEvB,OAAOA,eAAe,GAAG3B,WAAW,EAAE;MAClC;MACA,IAAM4B,iBAAiB,GAAGZ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGpB,CAAC,CAAC;MACvD,IAAM+B,oBAAoB,GAAGb,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGrB,IAAI,CAACiB,MAAM,CAAC;MAEpE,IAAMgB,UAAU,GAAGL,cAAc,CAACM,KAAK,CAAC,CAAC;MACzCD,UAAU,CAACF,iBAAiB,CAAC,GAAG/B,IAAI,CAACgC,oBAAoB,CAAC;MAE1D,IAAMG,OAAO,GAAG/B,kBAAkB,CAACJ,IAAI,EAAEiC,UAAU,CAAC;MAEpD,IAAIE,OAAO,GAAGN,WAAW,EAAE;QACvBD,cAAc,GAAGK,UAAU;QAC3BJ,WAAW,GAAGM,OAAO;QACrBL,eAAe,GAAG,CAAC,CAAC,CAAC;MACzB,CAAC,MAAM;QACHA,eAAe,EAAE;MACrB;IACJ;IAEA,IAAID,WAAW,GAAGH,QAAQ,EAAE;MACxBD,WAAW,GAAGG,cAAc;MAC5BF,QAAQ,GAAGG,WAAW;IAC1B;EACJ;EAEA,OAAOJ,WAAW;AACtB","ignoreList":[]}]}