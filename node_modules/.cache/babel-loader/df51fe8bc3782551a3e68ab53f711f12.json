{"remainingRequest":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js!E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\algo\\optics.js","dependencies":[{"path":"E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\algo\\optics.js","mtime":1729002769466},{"path":"E:\\GitProject\\T-DBSCAN\\babel.config.js","mtime":1677117676000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1720856214296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLm9wdGljcyA9IG9wdGljczsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbGwuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnB1c2guanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiKTsKdmFyIF9wdWJNZXRob2RzID0gcmVxdWlyZSgiLi9wdWJNZXRob2RzIik7CmZ1bmN0aW9uIG9wdGljcyhkYXRhLCBlcHMsIG1pblB0cykgewogIC8vIOWIpOaWreafkOS4queCueaYr+WQpuaYr+aguOW/g+eCuQogIGZ1bmN0aW9uIGp1ZGdlX2NvcmUocG9pbnQsIGRhdGEsIGRhdGFfbnVtLCBpbmRleCwgY29yZV9kaXN0KSB7CiAgICB2YXIgZGlzdCA9IFtdOwogICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGRhdGFfbnVtOyBfaSsrKSB7CiAgICAgIHZhciBkaXMgPSAoMCwgX3B1Yk1ldGhvZHMuY2FsY3VsYXRlRGlzdGFuY2UpKHBvaW50LCBkYXRhW19pXSk7CiAgICAgIGlmIChkaXMgPD0gZXBzICogMTAwMCkgewogICAgICAgIC8vIOi3neemu+WNleS9jei9rOaNouS4uuexswogICAgICAgIGRpc3QucHVzaChkaXMpOwogICAgICB9CiAgICB9CiAgICBpZiAoZGlzdC5sZW5ndGggPj0gbWluUHRzKSB7CiAgICAgIGRpc3Quc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgIHJldHVybiBhIC0gYjsKICAgICAgfSk7IC8vIOaOkuW6jwogICAgICBjb3JlX2Rpc3RbaW5kZXhdID0gZGlzdFttaW5QdHMgLSAxXTsgLy8g6K6w5b2V5qC45b+D6Led56a7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgLy8g5Yid5aeL5YyWCiAgdmFyIGRhdGFfbnVtID0gZGF0YS5sZW5ndGg7CiAgdmFyIGNvcmVfcG9pbnQgPSBuZXcgQXJyYXkoZGF0YV9udW0pLmZpbGwoMCk7IC8vIOiusOW9leaYr+WQpuaYr+aguOW/g+eCuQogIHZhciB2aXNpdCA9IG5ldyBBcnJheShkYXRhX251bSkuZmlsbCgwKTsgLy8g6K6w5b2V5piv5ZCm6KKr6K6/6Zeu6L+HCiAgdmFyIGNvcmVfZGlzdCA9IG5ldyBBcnJheShkYXRhX251bSkuZmlsbCgwKTsgLy8g5qC45b+D6Led56a7CiAgdmFyIHJlYWNoX2Rpc3QgPSBuZXcgQXJyYXkoZGF0YV9udW0pLmZpbGwoSW5maW5pdHkpOyAvLyDlj6/ovr7ot53nprsKICB2YXIgc2VlZHMgPSBbXTsgLy8g55So5LqO5a2Y5YKo55Sf5oiQ55qE56eN5a2QCgogIC8vIOWIpOaWreavj+S4queCueaYr+WQpuaYr+aguOW/g+eCuQogIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGRhdGFfbnVtOyBfaTIrKykgewogICAgaWYgKGp1ZGdlX2NvcmUoZGF0YVtfaTJdLCBkYXRhLCBkYXRhX251bSwgX2kyLCBjb3JlX2Rpc3QpID09IHRydWUpIHsKICAgICAgY29yZV9wb2ludFtfaTJdID0gMTsgLy8g6K+l54K55Li65qC45b+D54K5CiAgICB9CiAgfQogIHZhciBpZHggPSAwOyAvLyDovoXliqnnlJ/miJDmlbDnu4Tnp43lrZAKICAvLyDnlJ/miJDmlbDnu4Tnp43lrZAKICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCBkYXRhX251bTsgX2kzKyspIHsKICAgIGlmICghdmlzaXRbX2kzXSkgewogICAgICB2aXNpdFtfaTNdID0gMTsgLy8g5qCH6K6w6K+l54K55bey6K6/6ZeuCiAgICAgIHNlZWRzLnB1c2goewogICAgICAgIHJlYWNoRGlzdDogSW5maW5pdHksCiAgICAgICAgaW5kZXg6IF9pMwogICAgICB9KTsgLy8g5pS+5YWl56eN5a2Q5pWw57uECiAgICAgIC8vIOWkhOeQhiBzZWVkcyDmlbDnu4Tph4znmoTmnKrorr/pl67ngrkKICAgICAgd2hpbGUgKGlkeCA8IHNlZWRzLmxlbmd0aCkgewogICAgICAgIHZhciBjdXJyZW50SWR4ID0gc2VlZHNbaWR4XS5pbmRleDsKCiAgICAgICAgLy8g5Yik5pat5piv5ZCm5piv5qC45b+D54K5CiAgICAgICAgaWYgKGNvcmVfcG9pbnRbY3VycmVudElkeF0pIHsKICAgICAgICAgIHZhciB2aXNfcmVhY2hfZGlzdCA9IFtdOwoKICAgICAgICAgIC8vIOabtOaWsOacquiuv+mXrueCueeahOWPr+i+vui3neemuwogICAgICAgICAgZm9yICh2YXIgX2ogPSAwOyBfaiA8IGRhdGFfbnVtOyBfaisrKSB7CiAgICAgICAgICAgIGlmICghdmlzaXRbX2pdKSB7CiAgICAgICAgICAgICAgcmVhY2hfZGlzdFtfal0gPSBNYXRoLm1pbihjb3JlX2Rpc3RbY3VycmVudElkeF0sICgwLCBfcHViTWV0aG9kcy5jYWxjdWxhdGVEaXN0YW5jZSkoZGF0YVtfal0sIGRhdGFbY3VycmVudElkeF0pKTsKICAgICAgICAgICAgICB2aXNfcmVhY2hfZGlzdC5wdXNoKHsKICAgICAgICAgICAgICAgIHJlYWNoRGlzdDogcmVhY2hfZGlzdFtfal0sCiAgICAgICAgICAgICAgICBpbmRleDogX2oKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIOaOkuW6j+WPr+i+vui3neemuwogICAgICAgICAgdmlzX3JlYWNoX2Rpc3Quc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICByZXR1cm4gYS5yZWFjaERpc3QgLSBiLnJlYWNoRGlzdDsKICAgICAgICAgIH0pOwoKICAgICAgICAgIC8vIOWmguaenOacieWPr+i+vui3neemu+acgOWwj+eahOeCue+8jOWwhuWFtuWKoOWFpSBzZWVkcyDmlbDnu4TvvIzlubbmoIforrDkuLrlt7Lorr/pl64KICAgICAgICAgIGlmICh2aXNfcmVhY2hfZGlzdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHNlZWRzLnB1c2godmlzX3JlYWNoX2Rpc3RbMF0pOwogICAgICAgICAgICB2aXNpdFt2aXNfcmVhY2hfZGlzdFswXS5pbmRleF0gPSAxOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZHgrKzsgLy8g5aSE55CG5LiL5LiA5Liq54K5CiAgICAgIH0KICAgIH0KICB9CiAgdmFyIEMgPSBbXTsgLy/nlKjkuo7lrZjlgqjlvZLlsZ7nsIcKICB2YXIgY250ID0gMCwKICAgIGZsYWcgPSAwOwogIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IGRhdGFfbnVtIC0gMTsgX2k0KyspIHsKICAgIGlmIChzZWVkc1tfaTQgKyAxXS5yZWFjaERpc3QgPiBlcHMgKiAxMDAwKSB7CiAgICAgIGlmIChfaTQpIHsKICAgICAgICBpZiAoc2VlZHNbX2k0XS5yZWFjaERpc3QgPD0gZXBzICogMTAwMCkgewogICAgICAgICAgQy5wdXNoKHsKICAgICAgICAgICAgY2x1c3Rlcl9pbmRleDogY250LAogICAgICAgICAgICBpbmRleDogX2k0CiAgICAgICAgICB9KTsKICAgICAgICAgIGZsYWcgPSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBDLnB1c2goewogICAgICAgICAgICBjbHVzdGVyX2luZGV4OiAtMSwKICAgICAgICAgICAgaW5kZXg6IF9pNAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIEMucHVzaCh7CiAgICAgICAgICBjbHVzdGVyX2luZGV4OiAtMSwKICAgICAgICAgIGluZGV4OiBfaTQKICAgICAgICB9KTsKICAgICAgfQogICAgICBpZiAoZmxhZyA9PSAxKSB7CiAgICAgICAgZmxhZyA9IDA7CiAgICAgICAgY250Kys7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIEMucHVzaCh7CiAgICAgICAgY2x1c3Rlcl9pbmRleDogY250LAogICAgICAgIGluZGV4OiBfaTQKICAgICAgfSk7CiAgICB9CiAgfQogIEMuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgcmV0dXJuIGEuY250IC0gYi5jbnQ7CiAgfSk7CiAgdmFyIGNsdXN0ZXJDZW50ZXJzID0gW107CiAgdmFyIGluZGV4ID0gMDsKICBmb3IgKHZhciBpID0gMDsgaSA8IEMubGVuZ3RoOyBpKyspIHsKICAgIGlmIChDW2ldLmNsdXN0ZXJfaW5kZXggIT09IC0xKSB7CiAgICAgIGluZGV4ID0gaTsKICAgICAgYnJlYWs7CiAgICB9CiAgfQogIGZvciAodmFyIGkgPSAwOyBpIDw9IGNudDsgaSsrKSB7CiAgICB2YXIgQ2x1c3Rlcl9hcnIgPSBbXTsKICAgIGZvciAodmFyIGogPSBpbmRleDsgaiA8IEMubGVuZ3RoOyBqKyspIHsKICAgICAgaWYgKENbal0uY2x1c3Rlcl9pbmRleCA9PSBpKSB7CiAgICAgICAgdmFyIHBvaW50ID0gZGF0YVtDW2pdLmluZGV4XTsKICAgICAgICBDbHVzdGVyX2Fyci5wdXNoKHsKICAgICAgICAgIGxuZzogcG9pbnQubG5nLAogICAgICAgICAgbGF0OiBwb2ludC5sYXQsCiAgICAgICAgICB0aW1lOiBwb2ludC50aW1lCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoQ1tqXS5jbHVzdGVyX2luZGV4ICE9PSAtMSkgewogICAgICAgIGluZGV4ID0gaiArIDE7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIGlmIChDbHVzdGVyX2Fyci5sZW5ndGggPj0gMikgewogICAgICBDbHVzdGVyX2Fyci5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgKDAsIF9wdWJNZXRob2RzLmNvbnZlcnREYXRlU3RyaW5nVG9Vbml4KShhLnRpbWUpIC0gKDAsIF9wdWJNZXRob2RzLmNvbnZlcnREYXRlU3RyaW5nVG9Vbml4KShiLnRpbWUpOwogICAgICB9KTsKICAgICAgdmFyIHN0YXJ0VGltZVN0ciA9IENsdXN0ZXJfYXJyWzBdLnRpbWU7CiAgICAgIHZhciBlbmRUaW1lU3RyID0gQ2x1c3Rlcl9hcnJbQ2x1c3Rlcl9hcnIubGVuZ3RoIC0gMV0udGltZTsKICAgICAgdmFyIG1heHN0YXlUaW1lID0gKCgwLCBfcHViTWV0aG9kcy5jb252ZXJ0RGF0ZVN0cmluZ1RvVW5peCkoZW5kVGltZVN0cikgLSAoMCwgX3B1Yk1ldGhvZHMuY29udmVydERhdGVTdHJpbmdUb1VuaXgpKHN0YXJ0VGltZVN0cikpIC8gKDYwICogNjAgKiAyNCk7CiAgICAgIHZhciBjZW50ZXJQb2ludCA9ICgwLCBfcHViTWV0aG9kcy5nZXRDZW50ZXJQb2ludCkoQ2x1c3Rlcl9hcnIpOwogICAgICBjbHVzdGVyQ2VudGVycy5wdXNoKHsKICAgICAgICBtYXhzdGF5VGltZTogbWF4c3RheVRpbWUsCiAgICAgICAgc3RhcnRUaW1lU3RyOiBzdGFydFRpbWVTdHIsCiAgICAgICAgZW5kVGltZVN0cjogZW5kVGltZVN0ciwKICAgICAgICBjZW50ZXJQb2ludDogY2VudGVyUG9pbnQKICAgICAgfSk7CiAgICB9CiAgICBDbHVzdGVyX2Fyci5sZW5ndGggPSAwOwogIH0KICAvLyDov5Tlm57lpITnkIblkI7nmoTmlbDmja4KICBjb25zb2xlLmxvZyhjbHVzdGVyQ2VudGVycyk7CiAgcmV0dXJuIGNsdXN0ZXJDZW50ZXJzOwp9"},{"version":3,"names":["_pubMethods","require","optics","data","eps","minPts","judge_core","point","data_num","index","core_dist","dist","i","dis","calculateDistance","push","length","sort","a","b","core_point","Array","fill","visit","reach_dist","Infinity","seeds","idx","reachDist","currentIdx","vis_reach_dist","j","Math","min","C","cnt","flag","cluster_index","clusterCenters","Cluster_arr","lng","lat","time","convertDateStringToUnix","startTimeStr","endTimeStr","maxstayTime","centerPoint","getCenterPoint","console","log"],"sources":["E:/GitProject/T-DBSCAN/src/views/AMyWork/tools/algo/optics.js"],"sourcesContent":["import { calculateDistance,convertDateStringToUnix,convertUnixToDateString,getCenterPoint } from './pubMethods';\r\n\r\nexport function optics(data, eps, minPts) {\r\n    // 判断某个点是否是核心点\r\n    function judge_core(point, data, data_num, index, core_dist) {\r\n        const dist = [];\r\n        for (let i = 0; i < data_num; i++) {\r\n            const dis = calculateDistance(point, data[i]);\r\n            if (dis <= eps * 1000) { // 距离单位转换为米\r\n                dist.push(dis);\r\n            }\r\n        }\r\n\r\n        if (dist.length >= minPts) {\r\n            dist.sort((a, b) => a - b); // 排序\r\n            core_dist[index] = dist[minPts - 1]; // 记录核心距离\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // 初始化\r\n    const data_num = data.length;\r\n    const core_point = new Array(data_num).fill(0); // 记录是否是核心点\r\n    const visit = new Array(data_num).fill(0); // 记录是否被访问过\r\n    const core_dist = new Array(data_num).fill(0); // 核心距离\r\n    const reach_dist = new Array(data_num).fill(Infinity); // 可达距离\r\n    const seeds = []; // 用于存储生成的种子\r\n\r\n    // 判断每个点是否是核心点\r\n    for (let i = 0; i < data_num; i++) {\r\n        if (judge_core(data[i], data, data_num, i, core_dist) == true) {\r\n            core_point[i] = 1; // 该点为核心点\r\n        }\r\n    }\r\n    \r\n    let idx = 0; // 辅助生成数组种子\r\n    // 生成数组种子\r\n    for (let i = 0; i < data_num; i++) {\r\n        if (!visit[i]) {\r\n            visit[i] = 1; // 标记该点已访问\r\n            seeds.push({ reachDist: Infinity, index: i }); // 放入种子数组\r\n            // 处理 seeds 数组里的未访问点\r\n            while (idx < seeds.length) {\r\n                const currentIdx = seeds[idx].index;\r\n\r\n                // 判断是否是核心点\r\n                if (core_point[currentIdx]) {\r\n                    const vis_reach_dist = [];\r\n\r\n                    // 更新未访问点的可达距离\r\n                    for (let j = 0; j < data_num; j++) {\r\n                        if (!visit[j]) {\r\n                            reach_dist[j] = Math.min(core_dist[currentIdx], calculateDistance(data[j], data[currentIdx]));\r\n                            vis_reach_dist.push({ reachDist: reach_dist[j], index: j });\r\n                        }\r\n                    }\r\n\r\n                    // 排序可达距离\r\n                    vis_reach_dist.sort((a, b) => a.reachDist - b.reachDist);\r\n\r\n                    // 如果有可达距离最小的点，将其加入 seeds 数组，并标记为已访问\r\n                    if (vis_reach_dist.length > 0) {\r\n                        seeds.push(vis_reach_dist[0]);\r\n                        visit[vis_reach_dist[0].index] = 1;\r\n                    }\r\n                }\r\n                \r\n                idx++; // 处理下一个点\r\n            }\r\n        }\r\n    }\r\n    const C = []; //用于存储归属簇\r\n    var cnt = 0,flag = 0;\r\n    for(let i = 0; i < data_num - 1; i++){\r\n        if(seeds[i + 1].reachDist > eps * 1000){\r\n            if(i){\r\n                if(seeds[i].reachDist <= eps * 1000){\r\n                    C.push({ cluster_index: cnt, index: i })\r\n                    flag = 1\r\n                }else{\r\n                    C.push({ cluster_index: -1, index: i })\r\n                }\r\n            }else{\r\n                C.push({ cluster_index: -1, index: i })\r\n            }\r\n\r\n            if(flag == 1){\r\n                flag = 0\r\n                cnt ++ \r\n            }\r\n        }else {\r\n            C.push({ cluster_index: cnt, index: i })\r\n        }\r\n    }\r\n    C.sort((a,b)=> a.cnt - b.cnt)\r\n    const clusterCenters = [];\r\n    var index = 0;\r\n    for(var i=0;i<C.length;i++){\r\n        if(C[i].cluster_index !== -1){\r\n            index = i\r\n            break\r\n        }\r\n    }\r\n    for(var i=0;i<=cnt;i++){\r\n        const Cluster_arr = [];\r\n        for(var j = index;j<C.length;j++){\r\n            if(C[j].cluster_index == i){\r\n                const point = data[C[j].index]\r\n                Cluster_arr.push({lng:point.lng,lat:point.lat,time:point.time})\r\n            }else if(C[j].cluster_index !== -1){\r\n                index = j + 1\r\n                break\r\n            }\r\n        }\r\n        if(Cluster_arr.length>=2){\r\n            Cluster_arr.sort((a,b)=>{convertDateStringToUnix(a.time)-convertDateStringToUnix(b.time)})\r\n            const startTimeStr = Cluster_arr[0].time;\r\n            const endTimeStr = Cluster_arr[Cluster_arr.length-1].time;\r\n            const maxstayTime = ((convertDateStringToUnix(endTimeStr)-convertDateStringToUnix(startTimeStr))/(60*60*24));\r\n            const centerPoint = getCenterPoint(Cluster_arr);\r\n            clusterCenters.push({maxstayTime:maxstayTime,startTimeStr:startTimeStr,\r\n                endTimeStr:endTimeStr,centerPoint:centerPoint\r\n            })\r\n        }\r\n        Cluster_arr.length = 0\r\n    }\r\n    // 返回处理后的数据\r\n    console.log(clusterCenters)\r\n    return clusterCenters;\r\n}\r\n"],"mappings":"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","ignoreList":[]}]}