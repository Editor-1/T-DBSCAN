{"remainingRequest":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\babel-loader\\lib\\index.js!E:\\workspacevsCode\\web-ui-travel\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\workspacevsCode\\web-ui-travel\\src\\views\\AMyWork\\tools\\algo\\kmeans.js","dependencies":[{"path":"E:\\workspacevsCode\\web-ui-travel\\src\\views\\AMyWork\\tools\\algo\\kmeans.js","mtime":1722250609408},{"path":"E:\\workspacevsCode\\web-ui-travel\\babel.config.js","mtime":1677117676000},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\workspacevsCode\\web-ui-travel\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1720856214296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmtNZWFucyA9IGtNZWFuczsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5wdXNoLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIpOwpmdW5jdGlvbiBrTWVhbnMoZGF0YSwgaykgewogIC8vIOiuoeeul+S4pOeCuemXtOasp+awj+i3neemu+eahOi+heWKqeWHveaVsAogIGZ1bmN0aW9uIGNhbGN1bGF0ZURpc3RhbmNlKHBvaW50MSwgcG9pbnQyKSB7CiAgICB2YXIgbGF0MSA9IHBhcnNlRmxvYXQocG9pbnQxLmxhdCk7CiAgICB2YXIgbG5nMSA9IHBhcnNlRmxvYXQocG9pbnQxLmxuZyk7CiAgICB2YXIgbGF0MiA9IHBhcnNlRmxvYXQocG9pbnQyLmxhdCk7CiAgICB2YXIgbG5nMiA9IHBhcnNlRmxvYXQocG9pbnQyLmxuZyk7CiAgICB2YXIgcmFkTGF0MSA9IGxhdDEgKiBNYXRoLlBJIC8gMTgwLjA7CiAgICB2YXIgcmFkTGF0MiA9IGxhdDIgKiBNYXRoLlBJIC8gMTgwLjA7CiAgICB2YXIgYSA9IHJhZExhdDEgLSByYWRMYXQyOwogICAgdmFyIGIgPSBsbmcxICogTWF0aC5QSSAvIDE4MC4wIC0gbG5nMiAqIE1hdGguUEkgLyAxODAuMDsKICAgIHZhciBzID0gMiAqIE1hdGguYXNpbihNYXRoLnNxcnQoTWF0aC5wb3coTWF0aC5zaW4oYSAvIDIpLCAyKSArIE1hdGguY29zKHJhZExhdDEpICogTWF0aC5jb3MocmFkTGF0MikgKiBNYXRoLnBvdyhNYXRoLnNpbihiIC8gMiksIDIpKSk7CiAgICByZXR1cm4gcyAqIDYzNzA5OTYuODE7CiAgfQoKICAvLyDpmo/mnLrliJ3lp4vljJbkuK3lv4PngrnnmoTovoXliqnlh73mlbAKICBmdW5jdGlvbiBpbml0aWFsaXplQ2VudHJvaWRzKGRhdGEsIGspIHsKICAgIHZhciBjZW50cm9pZHMgPSBbXTsKICAgIHZhciB1c2VkSW5kaWNlcyA9IG5ldyBTZXQoKTsKICAgIHdoaWxlIChjZW50cm9pZHMubGVuZ3RoIDwgaykgewogICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBkYXRhLmxlbmd0aCk7CiAgICAgIGlmICghdXNlZEluZGljZXMuaGFzKGluZGV4KSkgewogICAgICAgIGNlbnRyb2lkcy5wdXNoKGRhdGFbaW5kZXhdKTsKICAgICAgICB1c2VkSW5kaWNlcy5hZGQoaW5kZXgpOwogICAgICB9CiAgICB9CiAgICBjb25zb2xlLmxvZygiSW5pdGlhbGl6ZWQgQ2VudHJvaWRzOiIsIGNlbnRyb2lkcyk7CiAgICByZXR1cm4gY2VudHJvaWRzOwogIH0KCiAgLy8g5bCG54K55YiG6YWN5Yiw5pyA6L+R5Lit5b+D54K555qE6L6F5Yqp5Ye95pWwCiAgZnVuY3Rpb24gYXNzaWduUG9pbnRzVG9DZW50cm9pZHMoZGF0YSwgY2VudHJvaWRzKSB7CiAgICB2YXIgY2x1c3RlcnMgPSBBcnJheS5mcm9tKHsKICAgICAgbGVuZ3RoOiBjZW50cm9pZHMubGVuZ3RoCiAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBbXTsKICAgIH0pOwogICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludCkgewogICAgICB2YXIgbWluRGlzdCA9IEluZmluaXR5OwogICAgICB2YXIgY2xvc2VzdENlbnRyb2lkID0gLTE7CiAgICAgIGNlbnRyb2lkcy5mb3JFYWNoKGZ1bmN0aW9uIChjZW50cm9pZCwgaW5kZXgpIHsKICAgICAgICB2YXIgZGlzdCA9IGNhbGN1bGF0ZURpc3RhbmNlKHBvaW50LCBjZW50cm9pZCk7CiAgICAgICAgaWYgKGRpc3QgPCBtaW5EaXN0KSB7CiAgICAgICAgICBtaW5EaXN0ID0gZGlzdDsKICAgICAgICAgIGNsb3Nlc3RDZW50cm9pZCA9IGluZGV4OwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIGlmIChjbG9zZXN0Q2VudHJvaWQgPT09IC0xKSB7CiAgICAgICAgLy8g5peg5pWI5pWw5o2u5aSE55CGCiAgICAgICAgLy8gY29uc29sZS5lcnJvcigiTm8gY2xvc2VzdCBjZW50cm9pZCBmb3VuZCBmb3IgcG9pbnQ6IiwgcG9pbnQpOwogICAgICB9IGVsc2UgewogICAgICAgIGNsdXN0ZXJzW2Nsb3Nlc3RDZW50cm9pZF0ucHVzaChwb2ludCk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIGNsdXN0ZXJzOwogIH0KCiAgLy8g5pu05paw5Lit5b+D54K555qE6L6F5Yqp5Ye95pWwCiAgZnVuY3Rpb24gdXBkYXRlQ2VudHJvaWRzKGNsdXN0ZXJzKSB7CiAgICByZXR1cm4gY2x1c3RlcnMubWFwKGZ1bmN0aW9uIChjbHVzdGVyKSB7CiAgICAgIGlmIChjbHVzdGVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7CiAgICAgIHZhciBzdW1MYXQgPSBjbHVzdGVyLnJlZHVjZShmdW5jdGlvbiAoc3VtLCBwb2ludCkgewogICAgICAgIHJldHVybiBzdW0gKyBwYXJzZUZsb2F0KHBvaW50LmxhdCk7CiAgICAgIH0sIDApOwogICAgICB2YXIgc3VtTG5nID0gY2x1c3Rlci5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgcG9pbnQpIHsKICAgICAgICByZXR1cm4gc3VtICsgcGFyc2VGbG9hdChwb2ludC5sbmcpOwogICAgICB9LCAwKTsKICAgICAgcmV0dXJuIHsKICAgICAgICBsYXQ6IHN1bUxhdCAvIGNsdXN0ZXIubGVuZ3RoLAogICAgICAgIGxuZzogc3VtTG5nIC8gY2x1c3Rlci5sZW5ndGgKICAgICAgfTsKICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoY2VudHJvaWQpIHsKICAgICAgcmV0dXJuIGNlbnRyb2lkICE9PSBudWxsOwogICAgfSk7CiAgfQoKICAvLyBLLW1lYW5zIOS4u+WHveaVsAogIHZhciBjZW50cm9pZHMgPSBpbml0aWFsaXplQ2VudHJvaWRzKGRhdGEsIGspOwogIHZhciBjbHVzdGVycyA9IFtdOwogIHZhciBpdGVyYXRpb25zID0gMDsKICB2YXIgbWF4SXRlcmF0aW9ucyA9IDEwMDsgLy8g6K6+572u5pyA5aSn6L+t5Luj5qyh5pWw6Ziy5q2i5peg6ZmQ5b6q546vCgogIHdoaWxlIChpdGVyYXRpb25zIDwgbWF4SXRlcmF0aW9ucykgewogICAgY2x1c3RlcnMgPSBhc3NpZ25Qb2ludHNUb0NlbnRyb2lkcyhkYXRhLCBjZW50cm9pZHMpOwogICAgdmFyIG5ld0NlbnRyb2lkcyA9IHVwZGF0ZUNlbnRyb2lkcyhjbHVzdGVycyk7CiAgICBpZiAoSlNPTi5zdHJpbmdpZnkobmV3Q2VudHJvaWRzKSA9PT0gSlNPTi5zdHJpbmdpZnkoY2VudHJvaWRzKSkgYnJlYWs7CiAgICBjZW50cm9pZHMgPSBuZXdDZW50cm9pZHM7CiAgICBpdGVyYXRpb25zKys7CiAgfQogIHJldHVybiBjZW50cm9pZHM7Cn0="},{"version":3,"names":["kMeans","data","k","calculateDistance","point1","point2","lat1","parseFloat","lat","lng1","lng","lat2","lng2","radLat1","Math","PI","radLat2","a","b","s","asin","sqrt","pow","sin","cos","initializeCentroids","centroids","usedIndices","Set","length","index","floor","random","has","push","add","console","log","assignPointsToCentroids","clusters","Array","from","forEach","point","minDist","Infinity","closestCentroid","centroid","dist","updateCentroids","map","cluster","sumLat","reduce","sum","sumLng","filter","iterations","maxIterations","newCentroids","JSON","stringify"],"sources":["E:/workspacevsCode/web-ui-travel/src/views/AMyWork/tools/algo/kmeans.js"],"sourcesContent":["export function kMeans(data, k) {\r\n    // 计算两点间欧氏距离的辅助函数\r\n    function calculateDistance(point1, point2) {\r\n        const lat1 = parseFloat(point1.lat);\r\n        const lng1 = parseFloat(point1.lng);\r\n        const lat2 = parseFloat(point2.lat);\r\n        const lng2 = parseFloat(point2.lng);\r\n\r\n        const radLat1 = lat1 * Math.PI / 180.0;\r\n        const radLat2 = lat2 * Math.PI / 180.0;\r\n        const a = radLat1 - radLat2;\r\n        const b = (lng1 * Math.PI / 180.0) - (lng2 * Math.PI / 180.0);\r\n        const s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) +\r\n            Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));\r\n        return s * 6370996.81;\r\n    }\r\n\r\n    // 随机初始化中心点的辅助函数\r\n    function initializeCentroids(data, k) {\r\n        const centroids = [];\r\n        const usedIndices = new Set();\r\n        while (centroids.length < k) {\r\n            const index = Math.floor(Math.random() * data.length);\r\n            if (!usedIndices.has(index)) {\r\n                centroids.push(data[index]);\r\n                usedIndices.add(index);\r\n            }\r\n        }\r\n        console.log(\"Initialized Centroids:\", centroids);\r\n        return centroids;\r\n    }\r\n\r\n    // 将点分配到最近中心点的辅助函数\r\n    function assignPointsToCentroids(data, centroids) {\r\n        const clusters = Array.from({ length: centroids.length }, () => []);\r\n        data.forEach(point => {\r\n            let minDist = Infinity;\r\n            let closestCentroid = -1;\r\n            centroids.forEach((centroid, index) => {\r\n                const dist = calculateDistance(point, centroid);\r\n                if (dist < minDist) {\r\n                    minDist = dist;\r\n                    closestCentroid = index;\r\n                }\r\n            });\r\n            if (closestCentroid === -1) {\r\n                // 无效数据处理\r\n                // console.error(\"No closest centroid found for point:\", point);\r\n            } else {\r\n                clusters[closestCentroid].push(point);\r\n            }\r\n        });\r\n        return clusters;\r\n    }\r\n\r\n    // 更新中心点的辅助函数\r\n    function updateCentroids(clusters) {\r\n        return clusters.map(cluster => {\r\n            if (cluster.length === 0) return null;\r\n            const sumLat = cluster.reduce((sum, point) => sum + parseFloat(point.lat), 0);\r\n            const sumLng = cluster.reduce((sum, point) => sum + parseFloat(point.lng), 0);\r\n            return { lat: sumLat / cluster.length, lng: sumLng / cluster.length };\r\n        }).filter(centroid => centroid !== null);\r\n    }\r\n\r\n    // K-means 主函数\r\n    let centroids = initializeCentroids(data, k);\r\n    let clusters = [];\r\n    let iterations = 0;\r\n    const maxIterations = 100; // 设置最大迭代次数防止无限循环\r\n\r\n    while (iterations < maxIterations) {\r\n        clusters = assignPointsToCentroids(data, centroids);\r\n        const newCentroids = updateCentroids(clusters);\r\n        if (JSON.stringify(newCentroids) === JSON.stringify(centroids)) break;\r\n        centroids = newCentroids;\r\n        iterations++;\r\n    }\r\n\r\n    return centroids;\r\n}\r\n"],"mappings":"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","ignoreList":[]}]}