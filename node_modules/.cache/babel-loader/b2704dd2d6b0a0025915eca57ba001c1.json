{"remainingRequest":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js!E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\poi\\test.js","dependencies":[{"path":"E:\\GitProject\\T-DBSCAN\\src\\views\\AMyWork\\tools\\poi\\test.js","mtime":1726627357000},{"path":"E:\\GitProject\\T-DBSCAN\\babel.config.js","mtime":1677117676000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\GitProject\\T-DBSCAN\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1720856214296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":[],"sources":["E:/GitProject/T-DBSCAN/src/views/AMyWork/tools/poi/test.js"],"sourcesContent":["//     clusave(){\r\n//       // const clusterLayer = L.markerClusterGroup({\r\n//       // showCoverageOnHover: false,\r\n//       // // zoomToBoundsOnClick: false,\r\n//       // // spiderfyOnMaxZoom: false,\r\n//       // // removeOutsideVisibleBounds: false,\r\n//       // // spiderLegPolylineOptions: {}\r\n//       // // 自定义聚合样式\r\n//       // // iconCreateFunction: function (cluster) {\r\n//       // // return L.divIcon({html: '<b class=\"bg-#[f40]\">' + cluster.getChildCount() + '</b>'});\r\n//       // // }\r\n//       // });\r\n//       // this.cludata.forEach(item =>{\r\n//       //   if (item.lat != null && item.lng != null) {\r\n//       //     const marker = L.marker([item.lng, item.lat], {  // 去掉多余的方括号\r\n//       //       title: `点 ${item.time}`,\r\n//       //       icon: L.icon({\r\n//       //         iconUrl: cluPointImg,\r\n//       //         iconSize: [12, 12],\r\n//       //         iconAnchor: [0, 0]\r\n//       //       })\r\n//       //     });\r\n\r\n//       //     marker.on('click', function (event) {\r\n//       //       console.log('marker ====', event.latlng);\r\n//       //     });\r\n\r\n//       //     marker.on('clusterclick', function (a) {\r\n//       //       console.log('cluster ' + a.layer.getAllChildMarkers().length);\r\n//       //     });\r\n\r\n//       //     clusterLayer.addLayer(marker);\r\n//       //   } else {\r\n//       //     console.warn(`Invalid lat/lng for item:`, item);\r\n//       //   }\r\n//       // })\r\n//       // map.addLayer(clusterLayer);\r\n//       // 清除先前的图层\r\n//       previousLayers.forEach(layer => {\r\n//         map.removeLayer(layer)\r\n//       });\r\n      \r\n//       previousLayers = []\r\n//       const markersCanvas = new L.MarkersCanvas()\r\n//       markersCanvas.addTo(map)\r\n      \r\n//       var icon = L.icon({\r\n//         iconUrl:cluPointImg,\r\n//         iconSize:[12,12],\r\n//         iconAnchor:[6,6]\r\n//       })\r\n//       const markers = []\r\n//       var temp_bird_data = []\r\n//       // 数据\r\n//       if(this.selectcludata == '灰鹤'){\r\n//         temp_bird_data = this.greyCrane\r\n//       }else if(this.selectcludata == '小天鹅'){\r\n//         temp_bird_data = this.cygne\r\n//       }else if(this.selectcludata == '鸟类1'){\r\n//         temp_bird_data = this.birdOne\r\n//       }else if(this.selectcludata == '鸟类2'){\r\n//         temp_bird_data = this.birdTwo\r\n//       }\r\n      \r\n//       //没有选择聚类方式\r\n//       if(this.clusterStyle.length == 0){\r\n//         if(this.pattern == '2'){\r\n//           //初始\r\n//           //点\r\n//           if(this.geometricType == '1'){\r\n//             temp_bird_data.then(birdArr =>{\r\n//               var latlngs = []\r\n//               birdArr.forEach(item=>{\r\n//                 if(item.lat != null && item.lng != null){\r\n//                   const marker = L.marker([item.lng,item.lat],{icon}).bindPopup(`时间:${item.time}<p>\r\n//                   经度:${item.lat}<p>纬度:${item.lng}`).on({\r\n//                     mouseover(e){\r\n//                       this.openPopup()\r\n//                     },\r\n//                     mouseout(e){\r\n//                       this.closePopup()\r\n//                     }\r\n//                   })\r\n//                   markers.push(marker)\r\n//                   latlngs.push([item.lng,item.lat])\r\n//                 }\r\n//               })\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers = previousLayers.concat(markers)\r\n//             })\r\n//           }//点+线\r\n//           else{\r\n//             temp_bird_data.then(birdArr =>{\r\n//               var latlngs = []\r\n//               birdArr.forEach(item=>{\r\n//                 if(item.lat != null && item.lng != null){\r\n//                   const marker = L.marker([item.lng,item.lat],{icon}).bindPopup(`时间:${item.time}<p>\r\n//                   经度:${item.lat}<p>纬度:${item.lng}`).on({\r\n//                     mouseover(e){\r\n//                       this.openPopup()\r\n//                     },\r\n//                     mouseout(e){\r\n//                       this.closePopup()\r\n//                     }\r\n//                   })\r\n//                   markers.push(marker)\r\n//                   latlngs.push([item.lng,item.lat])\r\n//                 }\r\n//               })\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers = previousLayers.concat(markers)\r\n//               //画线\r\n//               var polyline = L.polyline(latlngs,{color:'red',weight:3}).addTo(map)\r\n//               var decorator = L.polylineDecorator(polyline, {\r\n//                     patterns: [\r\n//                         // defines a pattern of 10px-wide dashes, repeated every 20px on the line\r\n//                         {offset: 0, repeat: 100, symbol: L.Symbol.arrowHead({\r\n//                          pixelSize: 6,  // 箭头大小\r\n//                          headAngle : 75,  // 角度\r\n//                          polygon: false,\r\n//                          pathOptions: {stroke: true, weight: 5, color: 'blue'}\r\n//                      })}\r\n//                     ]\r\n//                 }).addTo(map);\r\n//                 previousLayers.push(decorator)\r\n//                 previousLayers.push(polyline)\r\n//             })\r\n//           }\r\n//         }else if(this.pattern == '1'){\r\n//           //简化 点\r\n//           if(this.geometricType == '1'){\r\n//             temp_bird_data.then(birdArr=>{\r\n//               birdArr = douglasPeucker(birdArr,25000)\r\n//               var latlngs = []\r\n//               birdArr.forEach(item=>{\r\n//                 if(item[0] && item[1]){\r\n//                   const marker = L.marker([item[1],item[0]],{icon}).bindPopup(`时间:${item[2]}<p>经度:${item[1]}<p>纬度:${item[0]}`).on({\r\n//                       mouseover(e) {\r\n//                           this.openPopup();\r\n//                       },\r\n//                       mouseout(e) {\r\n//                           this.closePopup();\r\n//                       }\r\n//                   })\r\n//                   markers.push(marker)\r\n//                   latlngs.push([item[1], item[0]])\r\n//                 }\r\n//               })\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers.concat(markers)\r\n//             })\r\n//           }else{\r\n//             //点+线\r\n//             temp_bird_data.then(birdArr=>{\r\n//               var latlngs = []\r\n//               birdArr = douglasPeucker(birdArr,25000)\r\n//               birdArr.forEach(item=>{\r\n//                 if(item[0]!=null &&item[1]!=null&&item[0]!=0&&item[1]!=0){\r\n//                   const marker = L.marker([item[1],item[0]],{icon}).bindPopup(`时间:${item[2]}<p>经度:${item[1]}<p>纬度:${item[0]}`).on({\r\n//                       mouseover(e) {\r\n//                           this.openPopup();\r\n//                       },\r\n//                       mouseout(e) {\r\n//                           this.closePopup();\r\n//                       }\r\n//                   })\r\n//                   markers.push(marker)\r\n//                   latlngs.push([item[1], item[0]])\r\n//                 }\r\n//               })\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers.concat(markers)\r\n//               var polyline = L.polyline(latlngs,{color: 'red',weight: 3}).addTo(map);\r\n//               var decorator = L.polylineDecorator(polyline, {\r\n//                   patterns: [\r\n//                       // defines a pattern of 10px-wide dashes, repeated every 20px on the line\r\n//                       {offset: 0, repeat: 35, symbol: L.Symbol.arrowHead({\r\n//                         pixelSize: 5,  // 箭头大小\r\n//                         headAngle : 75,  // 角度\r\n//                         polygon: false,\r\n//                         pathOptions: {stroke: true, weight: 2, color: 'blue'}\r\n//                     })}\r\n//                   ]\r\n//                 }).addTo(map);\r\n//                 previousLayers.push(decorator)\r\n//                 previousLayers.push(polyline)\r\n//             })\r\n//           }\r\n//         }\r\n//       }else{\r\n//         //聚合\r\n//         if(this.clusterStyle == 1){//CLARANS\r\n//           if(this.geometricType == '1'){ //只有点\r\n//             temp_bird_data.then(birdArr=>{\r\n//               const clusterCenters = clarans(birdArr,20,5,100)\r\n//               console.log('clarans',clusterCenters)\r\n//               var latlngs = []\r\n//               clusterCenters.forEach(item=>{\r\n//                 if (item.lat != null && item.lng != null) {\r\n//                   const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`时间:${item.time}<p>经度:${item.lat}<p>纬度:${item.lng}`).on({\r\n//                     mouseover(e){\r\n//                       this.openPopup()\r\n//                     },\r\n//                     mouseout(e){\r\n//                       this.closePopup()\r\n//                     }\r\n//                   })\r\n//                   markers.push(marker)\r\n//                   latlngs.push([item.lng,item.lat])\r\n//                 }\r\n//               })\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers = previousLayers.concat(markers)\r\n//             })  \r\n//           }else{ //点+线\r\n//             temp_bird_data.then(birdArr=>{\r\n//               const clusterCenters = clarans(birdArr,20,5,100)\r\n//               console.log('clarans',clusterCenters)\r\n//               var latlngs = []\r\n//               clusterCenters.forEach(item=>{\r\n//                 if (item.lat != null && item.lng != null) {\r\n//                   const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`时间:${item.time}<p>经度:${item.lat}<p>纬度:${item.lng}`).on({\r\n//                     mouseover(e){\r\n//                       this.openPopup()\r\n//                     },\r\n//                     mouseout(e){\r\n//                       this.closePopup()\r\n//                     }\r\n//                   })\r\n//                   markers.push(marker)\r\n//                   latlngs.push([item.lng,item.lat])\r\n//                 }\r\n//               })\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers = previousLayers.concat(markers)\r\n//               var polyline = L.polyline(latlngs,{color: 'red',weight: 3}).addTo(map);\r\n//               var decorator = L.polylineDecorator(polyline, {\r\n//                   patterns: [\r\n//                       // defines a pattern of 10px-wide dashes, repeated every 20px on the line\r\n//                       {offset: 0, repeat: 35, symbol: L.Symbol.arrowHead({\r\n//                         pixelSize: 5,  // 箭头大小\r\n//                         headAngle : 75,  // 角度\r\n//                         polygon: false,\r\n//                         pathOptions: {stroke: true, weight: 2, color: 'blue'}\r\n//                     })}\r\n//                   ]\r\n//               }).addTo(map);\r\n//               previousLayers.push(decorator)\r\n//               previousLayers.push(polyline)\r\n//             })  \r\n//           }\r\n//         }else if(this.clusterStyle == 2){ //K-Means\r\n//           if(this.geometricType == '1'){ //只有点\r\n//             temp_bird_data.then(birdArr=>{\r\n//               const clusterCenters = kMeans(birdArr,20)\r\n//               console.log('kMeans',clusterCenters)\r\n//               var latlngs = []\r\n//               clusterCenters.forEach(item=>{\r\n//                 if (item.lat != null && item.lng != null) {\r\n//                   const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`时间:${item.time}<p>经度:${item.lat}<p>纬度:${item.lng}`).on({\r\n//                     mouseover(e){\r\n//                       this.openPopup()\r\n//                     },\r\n//                     mouseout(e){\r\n//                       this.closePopup()\r\n//                     }\r\n//                   })\r\n//                   markers.push(marker)\r\n//                   latlngs.push([item.lng,item.lat])\r\n//                 }\r\n//               })\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers = previousLayers.concat(markers)\r\n//             })  \r\n//           }else{ //点+线\r\n//             temp_bird_data.then(birdArr=>{\r\n//               const clusterCenters = kMeans(birdArr,20)\r\n//               console.log('kMeans',clusterCenters)\r\n//               var latlngs = []\r\n//               clusterCenters.forEach(item=>{\r\n//                 if (item.lat != null && item.lng != null) {\r\n//                   const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`时间:${item.time}<p>经度:${item.lat}<p>纬度:${item.lng}`).on({\r\n//                     mouseover(e){\r\n//                       this.openPopup()\r\n//                     },\r\n//                     mouseout(e){\r\n//                       this.closePopup()\r\n//                     }\r\n//                   })\r\n//                   markers.push(marker)\r\n//                   latlngs.push([item.lng,item.lat])\r\n//                 }\r\n//               })\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers = previousLayers.concat(markers)\r\n//               var polyline = L.polyline(latlngs,{color: 'red',weight: 3}).addTo(map);\r\n//               var decorator = L.polylineDecorator(polyline, {\r\n//                   patterns: [\r\n//                       // defines a pattern of 10px-wide dashes, repeated every 20px on the line\r\n//                       {offset: 0, repeat: 35, symbol: L.Symbol.arrowHead({\r\n//                         pixelSize: 5,  // 箭头大小\r\n//                         headAngle : 75,  // 角度\r\n//                         polygon: false,\r\n//                         pathOptions: {stroke: true, weight: 2, color: 'blue'}\r\n//                     })}\r\n//                   ]\r\n//               }).addTo(map);\r\n//               previousLayers.push(decorator)\r\n//               previousLayers.push(polyline)\r\n//             })  \r\n//           }\r\n//         }else if(this.clusterStyle == 3){ //DBSCAN\r\n//           if(this.geometricType == '1'){ //只有点\r\n//             temp_bird_data.then(birdArr=>{\r\n//               const clusterCenters = dbscan(birdArr,25,70)\r\n//               console.log('dbscan',clusterCenters)\r\n//               var latlngs = []\r\n//               clusterCenters.forEach(item=>{\r\n//                 if (item.lat != null && item.lng != null) {\r\n//                   const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`时间:${item.time}<p>经度:${item.lat}<p>纬度:${item.lng}`).on({\r\n//                     mouseover(e){\r\n//                       this.openPopup()\r\n//                     },\r\n//                     mouseout(e){\r\n//                       this.closePopup()\r\n//                     }\r\n//                   })\r\n//                   markers.push(marker)\r\n//                   latlngs.push([item.lng,item.lat])\r\n//                 }\r\n//               })\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers = previousLayers.concat(markers)\r\n//             })  \r\n//           }else{ //点+线\r\n//             temp_bird_data.then(birdArr=>{\r\n//               const clusterCenters = dbscan(birdArr,25,70)\r\n//               console.log('dbscan',clusterCenters)\r\n//               var latlngs = []\r\n//               clusterCenters.forEach(item=>{\r\n//                 if (item.lat != null && item.lng != null) {\r\n//                   const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`时间:${item.time}<p>经度:${item.lat}<p>纬度:${item.lng}`).on({\r\n//                     mouseover(e){\r\n//                       this.openPopup()\r\n//                     },\r\n//                     mouseout(e){\r\n//                       this.closePopup()\r\n//                     }\r\n//                   })\r\n//                   markers.push(marker)\r\n//                   latlngs.push([item.lng,item.lat])\r\n//                 }\r\n//               })\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers = previousLayers.concat(markers)\r\n//               var polyline = L.polyline(latlngs,{color: 'red',weight: 3}).addTo(map);\r\n//               var decorator = L.polylineDecorator(polyline, {\r\n//                   patterns: [\r\n//                       // defines a pattern of 10px-wide dashes, repeated every 20px on the line\r\n//                       {offset: 0, repeat: 35, symbol: L.Symbol.arrowHead({\r\n//                         pixelSize: 5,  // 箭头大小\r\n//                         headAngle : 75,  // 角度\r\n//                         polygon: false,\r\n//                         pathOptions: {stroke: true, weight: 2, color: 'blue'}\r\n//                     })}\r\n//                   ]\r\n//               }).addTo(map);\r\n//               previousLayers.push(decorator)\r\n//               previousLayers.push(polyline)\r\n//             })  \r\n//           }\r\n//         }else if(this.clusterStyle == 4){ //OPTICS\r\n//           if(this.geometricType == '1'){ //只有点\r\n//             temp_bird_data.then(birdArr=>{\r\n//               const clusterCenters = optics(birdArr,25,70)\r\n//               console.log('optics',clusterCenters)\r\n//               var latlngs = []\r\n//               clusterCenters.forEach(item=>{\r\n//                 if (item.lat != null && item.lng != null) {\r\n//                   const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`时间:${item.time}<p>经度:${item.lat}<p>纬度:${item.lng}`).on({\r\n//                     mouseover(e){\r\n//                       this.openPopup()\r\n//                     },\r\n//                     mouseout(e){\r\n//                       this.closePopup()\r\n//                     }\r\n//                   })\r\n//                   markers.push(marker)\r\n//                   latlngs.push([item.lng,item.lat])\r\n//                 }\r\n//               })\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers = previousLayers.concat(markers)\r\n//             })  \r\n//           }else{ //点+线\r\n//             temp_bird_data.then(birdArr=>{\r\n//               const clusterCenters = optics(birdArr,25,70)\r\n//               console.log('optics',clusterCenters)\r\n//               var latlngs = []\r\n//               clusterCenters.forEach(item=>{\r\n//                 if (item.lat != null && item.lng != null) {\r\n//                   const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`时间:${item.time}<p>经度:${item.lat}<p>纬度:${item.lng}`).on({\r\n//                     mouseover(e){\r\n//                       this.openPopup()\r\n//                     },\r\n//                     mouseout(e){\r\n//                       this.closePopup()\r\n//                     }\r\n//                   })\r\n//                   markers.push(marker)\r\n//                   latlngs.push([item.lng,item.lat])\r\n//                 }\r\n//               })\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers = previousLayers.concat(markers)\r\n//               var polyline = L.polyline(latlngs,{color: 'red',weight: 3}).addTo(map);\r\n//               var decorator = L.polylineDecorator(polyline, {\r\n//                   patterns: [\r\n//                       // defines a pattern of 10px-wide dashes, repeated every 20px on the line\r\n//                       {offset: 0, repeat: 35, symbol: L.Symbol.arrowHead({\r\n//                         pixelSize: 5,  // 箭头大小\r\n//                         headAngle : 75,  // 角度\r\n//                         polygon: false,\r\n//                         pathOptions: {stroke: true, weight: 2, color: 'blue'}\r\n//                     })}\r\n//                   ]\r\n//               }).addTo(map);\r\n//               previousLayers.push(decorator)\r\n//               previousLayers.push(polyline)\r\n//             })  \r\n//           }\r\n//         }else{ //T-DBSCAN\r\n//           if(this.geometricType == '1'){ //只有点\r\n//             temp_bird_data.then(birdArr=>{\r\n//               const gpsPoints = []\r\n//               var latlngs = []\r\n//               birdArr.forEach(item=>{\r\n//                 const temp = new ElePoint(parseFloat(item.lat), parseFloat(item.lng), convertDateStringToUnix(item.time), gpsPoints.length);\r\n//                 gpsPoints.push(temp);\r\n//               })\r\n//               console.log('原始数据',gpsPoints)\r\n//               if(this.maxstayTime == ''){\r\n//                 this.maxstayTime = 130\r\n//               }\r\n//               const {clusters,CorePoints} = tdbscan(gpsPoints,25000,60 * 60 * 24 * 3,60 * 60 * 24 * this.maxstayTime)\r\n//               console.log('here',CorePoints)\r\n//               console.log('hereee',clusters)\r\n              \r\n//               for(const p of CorePoints){\r\n//                 var num = 0\r\n//                 for(const v of clusters){\r\n//                   if(clusters[p.index]===v){\r\n//                     num++\r\n//                   }\r\n//                 }\r\n//                 if(num>=30){\r\n//                   const item = birdArr[p.index]\r\n//                   if (item.lat != null && item.lng != null) {\r\n//                     const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(`停留时间:${parseFloat(p.time/(60 * 60 * 24)).toFixed(2)}天<p>经度:${item.lat}<p>纬度:${item.lng}`).on({\r\n//                       mouseover(e){\r\n//                         this.openPopup()\r\n//                       },\r\n//                       mouseout(e){\r\n//                         this.closePopup()\r\n//                       }\r\n//                     })\r\n//                     markers.push(marker)\r\n//                     latlngs.push([item.lng,item.lat])\r\n//                   }\r\n                  \r\n//                 }\r\n//               }\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers = previousLayers.concat(markers)\r\n//             })  \r\n//           }else{ //点+线\r\n//             temp_bird_data.then(birdArr=>{\r\n//               const gpsPoints = []\r\n//               var latlngs = []\r\n//               birdArr.forEach(item=>{\r\n//                 const temp = new ElePoint(parseFloat(item.lat), parseFloat(item.lng), convertDateStringToUnix(item.time), gpsPoints.length);\r\n//                 gpsPoints.push(temp);\r\n//               })\r\n//               console.log('原始数据',gpsPoints)\r\n//               if(this.maxstayTime == ''){\r\n//                 this.maxstayTime = 130\r\n//               }\r\n//               const {clusters,CorePoints} = tdbscan(gpsPoints,25000,60 * 60 * 24 * 3,60 * 60 * 24 * this.maxstayTime)\r\n//               console.log('CorePoints',CorePoints)\r\n//               console.log('clusters',clusters)\r\n              \r\n//               for(const p of CorePoints){\r\n//                 var num = 0\r\n//                 for(const v of clusters){\r\n//                   if(clusters[p.index]===v){\r\n//                     num++\r\n//                   }\r\n//                 }\r\n//                 if(num>=30){\r\n//                   const item = birdArr[p.index]\r\n//                   if (item.lat != null && item.lng != null) {\r\n//                     const marker = L.marker([item.lng, item.lat],{icon}).bindPopup(\r\n//                       `时间:${item.time}<p>\r\n//                       经度:${item.lat}<p>\r\n//                       纬度:${item.lng}`).on({\r\n//                       mouseover(e){\r\n//                         this.openPopup()\r\n//                       },\r\n//                       mouseout(e){\r\n//                         this.closePopup()\r\n//                       }\r\n//                     })\r\n//                     markers.push(marker)\r\n//                     latlngs.push([item.lng,item.lat])\r\n//                   }\r\n                  \r\n//                 }\r\n//               }\r\n//               markersCanvas.addMarkers(markers)\r\n//               previousLayers = previousLayers.concat(markers)\r\n//               var polyline = L.polyline(latlngs,{color: 'red',weight: 3}).addTo(map);\r\n//               var decorator = L.polylineDecorator(polyline, {\r\n//                   patterns: [\r\n//                       // defines a pattern of 10px-wide dashes, repeated every 20px on the line\r\n//                       {offset: 0, repeat: 35, symbol: L.Symbol.arrowHead({\r\n//                         pixelSize: 5,  // 箭头大小\r\n//                         headAngle : 75,  // 角度\r\n//                         polygon: false,\r\n//                         pathOptions: {stroke: true, weight: 2, color: 'blue'}\r\n//                     })}\r\n//                   ]\r\n//               }).addTo(map);\r\n//               previousLayers.push(decorator)\r\n//               previousLayers.push(polyline)\r\n//             })  \r\n//           }\r\n//         }\r\n//        }\r\n//       previousLayers.push(markersCanvas)\r\n// }"],"mappingsignoreList":[]}]}